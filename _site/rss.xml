<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>红薯的技术博客</title>
        <description>红薯的技术博客 - 红薯</description>
        <link>http://F-olivia.github.io</link>
        <link>http://F-olivia.github.io</link>
        <lastBuildDate>2015-10-29T10:12:11+08:00</lastBuildDate>
        <pubDate>2015-10-29T10:12:11+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>mysql学习系列（三）</title>
                <description>
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/database/2015/09/26/mysql/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;三、数值类型&lt;/h5&gt;

&lt;p&gt;支持标准SQL2003所有数值类型，在前面“概述”已经描述过，具体：&lt;/p&gt;

&lt;p&gt;1  整型（interger data）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TINYINT&lt;/li&gt;
  &lt;li&gt;SMALLINT&lt;/li&gt;
  &lt;li&gt;MEDIUMINT&lt;/li&gt;
  &lt;li&gt;INT&lt;/li&gt;
  &lt;li&gt;BIGINT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;表1：&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;存储(Bytes)&lt;/td&gt;&lt;td&gt;Min Value &lt;br /&gt; (Signed/Unsigned)&lt;/td&gt;&lt;td&gt;Max Value &lt;br /&gt; (Signed/Unsigned)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;TINYINT&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;-128&lt;/td&gt;&lt;td&gt;127&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;255&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SMALLINT&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;-32768&lt;/td&gt;&lt;td&gt;32767&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;65535&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MEDIUMINT&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;-8388608&lt;/td&gt;&lt;td&gt;8388607&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;16777215&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;INT&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;-2147483648&lt;/td&gt;&lt;td&gt;2147483647&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;4294967295&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BIGINT&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;-9223372036854775808&lt;/td&gt;&lt;td&gt;9223372036854775807&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;18446744073709551615&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;2  固定宽度（a fixed-point）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DECIMAL&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NUMERIC&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]
  M:代表保存数据的长度，最大为65；默认为10
  D:代表小数点部分的位数，最大为30
  存储为二进制存储，每9个数字需要4个字节；举例decimal(12,2),整数部分：4+[(12-2)-9]/2=5，小数部分：2/2=1,共计6字节。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如图1：
&lt;img src=&quot;/assets/blog-images/20151009163109.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3  BIT型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	BIT[(M)]
	M:代表存储长度，1~64bits
	存储是二进制位，存储换算：INT((n+7)/8),比如bit(1),为1个字节。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体操作请看
如图2：
&lt;img src=&quot;/assets/blog-images/20151009170200.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4  浮点型（floating-point）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;FLOAT：单精度浮点型&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]
  M:代表保存数据的长度，0~23bytes
  D:代表小数点部分的位数，
  存储为4个字节，如果长度&amp;gt;24，自动转换为DOUBLE。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DOUBLE：双精度浮点型&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]
  M:代表保存数据的长度，24~53bytes
  D:代表小数点部分的位数，
  存储为8个字节，
  real类型是同义词。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体操作请看
如图3：
&lt;img src=&quot;/assets/blog-images/20151009172422.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5  数据类型属性&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NOT NULL：不允许为空&lt;/li&gt;
  &lt;li&gt;NULL：允许为空&lt;/li&gt;
  &lt;li&gt;DEFAULT：默认值&lt;/li&gt;
  &lt;li&gt;AUTO_INCREMENT：自增长类型，只有整型为自增长类型&lt;/li&gt;
  &lt;li&gt;UNSIGNED：无符号&lt;/li&gt;
  &lt;li&gt;ZEROFILL：填充零&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体操作请看
如图4：
&lt;img src=&quot;/assets/blog-images/20151029100642.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
</description>
                <link>http://F-olivia.github.io/database/2015/10/29/mysql</link>
                <guid>http://F-olivia.github.io/database/2015/10/29/mysql</guid>
                <pubDate>2015-10-29T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>mysql学习系列（二）</title>
                <description>
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/database/2015/09/22/mysql/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;二、字符串类型&lt;/h5&gt;

&lt;p&gt;1 固定长度（Fixed-width）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CHARACTER(length)&lt;/li&gt;
  &lt;li&gt;CHAR(length)：是CHARACTER的简写，其中MYSQL还可以这么定义：NATIONAL CHAR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2 可变长度（Variable-length）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VARCHAR(length)&lt;/li&gt;
  &lt;li&gt;NATIONAL VARCHAR（length）&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;sqlmode&quot;&gt;区别：跟字符集和系统参数sql_mode都有关系&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;1）长度，char：0~255；varchar：0-65535(255*255)
2）存储（Stored），
3）检索（retrieved）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表1：&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;td&gt;值&lt;/td&gt;&lt;td&gt;CHAR(4)&lt;/td&gt;&lt;td&gt;检索&lt;/td&gt;&lt;td&gt;存储&lt;/td&gt;&lt;td&gt;VARCHAR(4)&lt;/td&gt;&lt;td&gt;存储&lt;/td&gt;&lt;td&gt;检索&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&#39;&#39;&lt;/td&gt;&lt;td&gt;&#39;    &#39;&lt;/td&gt;&lt;td&gt;&#39;&#39;&lt;/td&gt;&lt;td&gt;4bytes&lt;/td&gt;&lt;td&gt;&#39;&#39;&lt;/td&gt;&lt;td&gt;1bytes&lt;/td&gt;&lt;td&gt;&#39;&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&#39;ab&#39;&lt;/td&gt;&lt;td&gt;&#39;ab  &#39;&lt;/td&gt;&lt;td&gt;&#39;ab&#39;&lt;/td&gt;&lt;td&gt;4bytes&lt;/td&gt;&lt;td&gt;&#39;ab&#39;&lt;/td&gt;&lt;td&gt;3bytes&lt;/td&gt;&lt;td&gt;&#39;ab&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&#39;ab &#39;&lt;/td&gt;&lt;td&gt;&#39;ab  &#39;&lt;/td&gt;&lt;td&gt;&#39;ab&#39;&lt;/td&gt;&lt;td&gt;4bytes&lt;/td&gt;&lt;td&gt;&#39;ab &#39;&lt;/td&gt;&lt;td&gt;3bytes&lt;/td&gt;&lt;td&gt;&#39;ab &#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;4bytes&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;5bytes&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&#39;abcdefgh&#39;&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;4bytes&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;5bytes&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;从表1中得出以下结论：
表2：&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;CHAR(M)&lt;/td&gt;&lt;td&gt;VARCHAR(M)&lt;/td&gt;&lt;td&gt;备注&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;长度&lt;/td&gt;&lt;td&gt;固定长度&lt;/td&gt;&lt;td&gt;根据字符集自动换算长度，&lt;br /&gt;
该表当中所有之和&amp;lt;65535&lt;/td&gt;&lt;td&gt;跟字符集有关&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;存储&lt;/td&gt;&lt;td&gt;固定长度，不足补空格；&lt;br /&gt;超长的话，
根据sql_mode&lt;br /&gt;进行报错，或自动截断&lt;/td&gt;&lt;td&gt;空字符，需要一个字节；&lt;br /&gt;
如果&amp;lt;255个字节，会增加一个&lt;br /&gt;字节，记录长度；&lt;br /&gt;如果&amp;gt;255个字节,会增加两个字节&lt;/td&gt;&lt;td&gt;跟sql_mode有关&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;检索&lt;/td&gt;&lt;td&gt;取出来的值，会截取多余空格；&lt;br /&gt;跟sql_mode有关&lt;/td&gt;&lt;td&gt;跟存储的内容一致&lt;/td&gt;&lt;td&gt;跟sql_mode有关&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;具体请看实例：
如图1：
&lt;img src=&quot;/assets/blog-images/20150922163551.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-1&quot;&gt;有关知识点：&lt;/h5&gt;
&lt;p&gt;a、字符集，这个概念比较大，为了不影响本章主题，这里就不过多介绍，有时间会单独抽出一章来着重介绍&lt;/p&gt;

&lt;p&gt;b、sql_mode：表示SQL运行在何种模式，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;查看：show variables like ‘sql_mode’; 或者 SELECT @@GLOBAL.sql_mode;SELECT @@SESSION.sql_mode;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设置：SET GLOBAL sql_mode = ‘modes’;SET SESSION sql_mode = ‘modes’;
或者在配置文件my.cnf(unix)/my.ini(windows),写入sql_mode=”modes”;如果多个用”,”隔开&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;几类常见的模式：STRICT_TRANS_TABLES、STRICT_ALL_TABLES、PAD_CHAR_TO_FULL_LENGTH等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参考：refman-5.6-en.a4，Section 5.1.7, “Server SQL Modes”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于sql_mode具体操作如下：
如图2：
&lt;img src=&quot;/assets/blog-images/20150922164809.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c、常用命令：&lt;/p&gt;

&lt;p&gt;查看表结构:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;desc(describe) table_name;
explain table_name;
show columns from table_name;
show create table table_name;(这个可以查看表的定义)

举例：创建表t_desc

mysql&amp;gt; create table t_desc(
-&amp;gt; col1 char(6) not null default &#39;&#39;,
-&amp;gt; col2 character(6),
-&amp;gt; col3 varchar(6),
-&amp;gt; col4 national varchar(6));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体操作请看，
如图3：
&lt;br /&gt;
&lt;img src=&quot;/assets/blog-images/20150922095133.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;d、问题：根据mysql参考文档中，varchar(4)，如果实际存储‘abcd’，存储长度是5，怎么查看？&lt;/p&gt;

&lt;p&gt;3 二进制（BINARY）和可变长度二进制（VARBINARY）&lt;/p&gt;

&lt;h5 id=&quot;sqlmode-1&quot;&gt;区别：跟系统参数sql_mode都有关；与字符集无关&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;1）长度，BINARY：0~255；VARBINARY：0-65535
2）存储：单个字节存储的，所以跟字符集无关
3）如果，sql_mode指定为空，超过指定长度存储，会报警告，且自动截断；如果指定为STRICT_TRANS_TABLE，则会报错
4）如果，存储值长度不够，用0字节（0x00）补全；
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体请看，
如图4：
&lt;br /&gt;
&lt;img src=&quot;/assets/blog-images/20150923164823.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4 二进制大对象（BLOB）和文本大对象（text）&lt;/p&gt;

&lt;p&gt;该数据类型没有太多介绍，只是存储备注等需要更长描述性字段，涉及2个参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;max_sort_length：进行排序和分组有意义的字节长度&lt;/li&gt;
  &lt;li&gt;max_allowed_packet：客户端与服务器端通讯缓存包大小&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-2&quot;&gt;区别：列出二进制字符和非二进制字符&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;非二进制字符串
&amp;gt; char(0-255)&lt;br /&gt;
&amp;gt; varchar(0-65535)&lt;br /&gt;
&amp;gt; text(0-65535)&lt;br /&gt;
&amp;gt; TINYTEXT(0-255)&lt;br /&gt;
&amp;gt; MEDIUMTEXT(0-16777215)&lt;br /&gt;
&amp;gt; LONGTEXT(0-4294967295)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;二进制字符串
&amp;gt; BINARY(0-255)&lt;br /&gt;
&amp;gt; VARBINARY(0-65535)&lt;br /&gt;
&amp;gt; TINYBLOB(0-255)&lt;br /&gt;
&amp;gt; BLOB(0-65535)&lt;br /&gt;
&amp;gt; MEDIUMBLOB(0-16777215)&lt;br /&gt;
&amp;gt; LONGBLOB(0-4294967295)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5 枚举型（ENUM）和SET字符串对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）长度：ENUM（0-65535）；SET（64个不同成员）
2）ENUM只能有一个，空串或者为null；SET可以多个值
3）ENUM索引值为自然值，0表示这是非法值；SET索引值为该实际值的二进制编码
4）存储NUMBER类型，也是用引号引起来
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体请看实验吧：
如图5：
&lt;br /&gt;
&lt;img src=&quot;/assets/blog-images/20150924162913.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/blog-images/20150924164031.png&quot; alt=&quot;Alt text&quot; /&gt;	&lt;/p&gt;
</description>
                <link>http://F-olivia.github.io/database/2015/09/22/mysql</link>
                <guid>http://F-olivia.github.io/database/2015/09/22/mysql</guid>
                <pubDate>2015-09-22T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>mysql学习系列（一）</title>
                <description>
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/database/2015/09/18/mysql/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;目录：&lt;/h3&gt;
&lt;p&gt;本次学习依据mysql版本：Server version: 5.6.23-log MySQL Community Server (GPL)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;概述&lt;/li&gt;
&lt;li&gt;字符串类型&lt;/li&gt;
&lt;li&gt;数值类型&lt;/li&gt;
&lt;li&gt;日期和时间类型&lt;/li&gt;
&lt;li&gt;应用场景&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;section-1&quot;&gt;一、概述&lt;/h5&gt;
&lt;p&gt;如目录中所列，字符串（string type）、数值（numeric type）、日期与时间（date and time type）&lt;/p&gt;

&lt;p&gt;1 字符串（string type）：依据标准SQL（92，99，2003等）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) 固定长度（Fixed-width）
* CHARACTER(length)
* CHAR(length)

2) 可变长度（Variable-length）
* CHARACTER VARYING(length)
* CHAR VARYING(length)
* VARCHAR(length)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但，SQL2003中有关大数据对象类型，mysql中是没有的，如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* CHARACTER LARGE OBJECT
* CHAR LARGE OBJECT
* CLOB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，mysql支持以下类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3）二进制（BINARY）和可变长度二进制（VARBINARY）
4）二进制大对象（BLOB）和文本大对象（text）
5）枚举型（ENUM）
6）SET字符串对象
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 数值（numeric type）：支持标准SQL2003所有数值类型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) 整型（interger data）
* TINYINT
* SMALLINT
* MEDIUMINT
* INT
* BIGINT

2）浮点型（floating-point）
* FLOAT
* DOUBLE

3）固定宽度（a fixed-point）
* DECIMAL
* NUMERIC

4）BIT型
* BIT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SQL2003的数值类型有以下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）精确数值类型（Exact numeric）
* NUMERIC(g,f)
* DECIMAL(g,f) -(DEC)
* SMALLINT
* INTEGER(INT)
* BIGINT

2）近似值类型（Approximate numeric）
* FLOAT(p)
* REAL
* DOUBLE PRECISION

3）扩充了一些
* TINYINT
* MEDIUMINT
* BIT(x)
* SERIAL
	&amp;gt;&amp;gt;(BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE KEY)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 日期与时间（date and time type）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）DATETIME
2）DATE
3）TIME
4）YEAR
5）TIMESTAMP
6）Zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与SQL2003标准有所不同&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）DATE
2）TIME(p)，其中p代表精度
3）TIMESRAMP(p)，--[WITH|WITHOUT] TIME ZONE可以带时区
&lt;/code&gt;&lt;/pre&gt;

</description>
                <link>http://F-olivia.github.io/database/2015/09/18/mysql</link>
                <guid>http://F-olivia.github.io/database/2015/09/18/mysql</guid>
                <pubDate>2015-09-18T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>git+github+markdown+jekyll blog系列（三）</title>
                <description>
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/ruby/2015/04/10/jekyll/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;三、实现&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://f-olivia.github.io/ruby/2015/03/31/jekyll/&quot;&gt;系列(一)&lt;/a&gt;学习完阮一峰同学的文章后，你就已经有能力搭建自己的独立博客了，但是这个博客 只有最基本的功能，并且也不好看。想想，有几种方式打造自己的blog：&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;完全自己定制博客&lt;/li&gt;
    &lt;li&gt;找一份框架，修改后使用&lt;/li&gt;
    &lt;li&gt;从GitHub上fork别人的博客代码，在其中添加自己的文章&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;遵从简单原则，我选择第三种方式，fork了&lt;a href=&quot;http://xpmozong.github.io/&quot;&gt;寞踪&lt;/a&gt;，做了简单的修改，然后发表自己的文章。
好，开工吧。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用GitHub Pages建立博客；阮一峰是通过本地创建自己blog，然后推送到github。我呢，利用github Pages自动生成一个blog，然后clone到本地。具体怎么做呢？还是建议参考&lt;a href=&quot;http://yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/&quot;&gt;Github Pages极简教程 - 雁起平沙的网络日志&lt;/a&gt;；这里就罗列一下步骤：&lt;/p&gt;

    &lt;p&gt;1）、创建代码库：登录github，选择New repository，输入项目名称xxxx.github.io&lt;/p&gt;

    &lt;p&gt;2）、点击按钮create repository&lt;/p&gt;

    &lt;p&gt;3）、点击按钮admin，选择按钮Automatic page generator，生成静态网页&lt;/p&gt;

    &lt;p&gt;ok，你所创建的xxxx.github.io的blog已经生成&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;clone上面所创建的库，命令：git clone git@github.com:F-olivia/F-olivia.git 或者 git clone https://github.com/F-olivia/F-olivia.github.io.git；&lt;/p&gt;

    &lt;p&gt;在开始菜单里找到RailsInstaller –&amp;gt; Git Bash，执行上面的命令，
 然后就在本地目录，C:\Sites\F-olivia.github.io生成一个文件夹F-olivia.github.io，保留文件夹.git&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;clone别人的库，git clone https://github.com/xpmozong/xpmozong.github.io.git；删除其目录下文件夹.git&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;简单修改：主要是针对文件夹xpmozong.github.io内容进行调整，&lt;/p&gt;

    &lt;p&gt;1）、删除文件夹.site&lt;/p&gt;

    &lt;p&gt;2）、清空文件夹.post下的所有文件&lt;/p&gt;

    &lt;p&gt;3）、全文搜索一下关键字xpmozong，用自己的库名替换&lt;/p&gt;

    &lt;p&gt;ok，感觉做贼一样，偷了别人的劳动成果。那没办法谁让我web方面一窍不通，还不想太多浪费时间。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;拷贝xpmozong.github.io下所有内容，复制到自己库目录下&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用markdownpad2 创建一个文件2015-03-28-markdonnote.md，内容：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 layout: default
 title: 你好，世界
 category: 日志
 comments: true
	
 ---
	
 &amp;lt;h2&amp;gt;git+github+markdown+jekyll blog系列（三）&amp;lt;/h2&amp;gt;
	
 &amp;lt;p&amp;gt;我的第一篇文章&amp;lt;/p&amp;gt;
	
 &amp;lt;p&amp;gt;10 Apr 2015&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;发布自己的库，命令：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; jekyll build    #编译生成静态网页
 git init    #--初始化本地库
 git add -A    #--添加本地库新增文件
 git commit -m &quot;first commit&quot;    #--提交
 git push -u origin master    #--推送到github远程库
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;介绍一下jekyll的结构，&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ```
 .
 ├── index.html
 ├── _config.yml
 ├── assets
 │   ├── blog-images
 │   ├── css
 │   ├── fonts
 │   ├── images
 │   └── javascripts
 ├── _includes
 ├── _layouts
 ├── _plugins
 ├── _posts
 └── _site
 ```
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;_config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是针对 Jekyll 的&lt;a href=&quot;http://jekyllrb.com/docs/configuration/&quot;&gt;配置文件&lt;/a&gt;，
决定了 Jekyll 如何解析网站的源代码,下面是一个示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	```
	baseurl: /StrayBirds
	markdown: redcarpet
	safe: false
	pygments: true
	excerpt_separator: &quot;\n\n\n&quot;
	paginate: 5
	```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我的网站建立在 &lt;code&gt;StrayBirds&lt;/code&gt; 项目中，所以 &lt;code&gt;baseurl&lt;/code&gt; 设置成 &lt;code&gt;StrayBirds&lt;/code&gt;，
我的文章采用 Markdown 格式写成，可以指定 Markdown 的解析器 &lt;code&gt;redcarpet&lt;/code&gt;。
另外，安全模式需要关闭，以便 Jekyll 解析时会运行插件。
&lt;code&gt;pygments&lt;/code&gt; 可以使得Jekyll解析文章中源代码时加入特殊标记，例如指定代码类型，
这可以被很多 javascript 代码高度库使用。
&lt;code&gt;excerpt_separator&lt;/code&gt; 指定了一个摘要分割符号，这样 Jekyll 可以在解析文章时，
将文章的提要提取出来。
paginate 指定了一页有几篇文章，页数太多时，我们可以将文章列表分页，我们在
后文还会提到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;_layouts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个目录存放着一些网页模板文件，为网站所有网页提供一个基本模板，这样
每个网页只需要关心自己的内容就好，其它的都由模板决定。例如，这个目录下的
default.html 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	```html
	
	&amp;lt;!DOCTYPE html&amp;gt;
	&amp;lt;html&amp;gt;
	  &amp;lt;head&amp;gt;
	    &amp;lt;meta charset=&#39;utf-8&#39;&amp;gt;
	    &amp;lt;title&amp;gt;{{ page.title }}&amp;lt;/title&amp;gt;
	  &amp;lt;/head&amp;gt;
	  &amp;lt;body&amp;gt;
	    &amp;lt;header&amp;gt;
	    &amp;lt;/header&amp;gt;
	
	    &amp;lt;aside&amp;gt;
	    &amp;lt;/aside&amp;gt;
	
	    &amp;lt;article&amp;gt;
	{{ content }}
	    &amp;lt;/article&amp;gt;
	
	    &amp;lt;footer&amp;gt;
	    &amp;lt;/footer&amp;gt;
	  &amp;lt;/body&amp;gt;
	&amp;lt;/html&amp;gt;
	
	
	```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出，这个文件就是所有页面共有的东西，每个页面的具体内容会被填充在
`` 中，注意这个 content 两边的标记，这是一种叫 
&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;liquid&lt;/a&gt; 的标记语言。
另外，还有那个 &lt;code&gt;git+github+markdown+jekyll blog系列（三）&lt;/code&gt; ，其中 &lt;code&gt;page&lt;/code&gt; 表示引用 &lt;code&gt;default.html&lt;/code&gt;的
那个页面，这个页面的 &lt;code&gt;title&lt;/code&gt; 值会在 &lt;code&gt;page&lt;/code&gt; 相应页面中被设置，例如
下面的 &lt;code&gt;index.html&lt;/code&gt; 文件，开头部分就设置了 &lt;code&gt;title&lt;/code&gt; 值。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;index.html &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是网站的首页，访问 &lt;code&gt;http://username.github.io&lt;/code&gt; 时，会指向 
&lt;code&gt;http://username.github.io/index.html&lt;/code&gt;，我们看一下基本内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	```html
		---
		layout: default
		title: 首页
		---
	
	
	&amp;lt;ul class=&quot;post-list&quot;&amp;gt;
	    {% for post in site.posts %}
	        &amp;lt;a href=&quot;{{site.baseurl}}{{post.url}}&quot;&amp;gt; {{ post.title }}  &amp;lt;/a&amp;gt; &amp;lt;br&amp;gt;
	        {{ post.date | date: &quot;%F&quot; }} &amp;lt;br&amp;gt;
	        {{ post.category }} &amp;lt;br&amp;gt;
	        {{ post.excerpt }} 
	    {% endfor %}
	
	&amp;lt;/ul&amp;gt;
	```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，文件开头的描述，我们称之为 &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;front-matter&lt;/a&gt;，
是对当前文件的一种描述，这里
设置的变量可以在解析时被引用，例如这里的 &lt;code&gt;layout&lt;/code&gt;就会告诉 Jekyll, 生成 &lt;code&gt;index.html&lt;/code&gt;
文件时，去 &lt;code&gt;_layouts&lt;/code&gt; 目录下找 &lt;code&gt;default.html&lt;/code&gt; 文件，然后把当前文件解析后，添加到
&lt;code&gt;default.html&lt;/code&gt; 的 &lt;code&gt;content&lt;/code&gt; 部分，组成最终的 &lt;code&gt;index.html&lt;/code&gt; 文件。还有&lt;code&gt;title&lt;/code&gt; 设置好的
值，会在 &lt;code&gt;default.html&lt;/code&gt; 中通过 &lt;code&gt;page.title&lt;/code&gt; 被引用。&lt;/p&gt;

&lt;p&gt;文件的主体部分遍历了站点的所有文章，并将他们显示出来，这些语法都是 &lt;code&gt;liquid&lt;/code&gt; 语法，
其中的变量，例如 &lt;code&gt;site&lt;/code&gt;, 由 Jekyll 设置我们只需要引用就可以了。而 &lt;code&gt;post&lt;/code&gt; 中的变量，
如 &lt;code&gt;post.title&lt;/code&gt;, &lt;code&gt;post.category&lt;/code&gt; 是由 &lt;code&gt;post&lt;/code&gt; 文件中的 front-matter 决定，后面马上就会看到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;_posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个目录存放我们的所有博客文章，他们的名字有统一的格式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	```
	YEAR-MONTH-DAY-title.MARKUP
	```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如，2014-02-15-github-jeklly.md，这个文件名会被解析，前面的 &lt;code&gt;index.html&lt;/code&gt; 中，
&lt;code&gt;post.date&lt;/code&gt; 的值就由这里文件名中的日期而来。下面，我们看看一篇文章的内容示例：&lt;/p&gt;

&lt;p&gt;ok，今天就到这儿吧，还有个尾巴，明天接着来&lt;/p&gt;
</description>
                <link>http://F-olivia.github.io/ruby/2015/04/10/jekyll</link>
                <guid>http://F-olivia.github.io/ruby/2015/04/10/jekyll</guid>
                <pubDate>2015-04-10T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>git+github+markdown+jekyll blog系列（二）</title>
                <description>
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/ruby/2015/04/09/jekyll/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;三、准备工作&lt;/h5&gt;

&lt;p&gt;（一） 工具介绍：git、github、jekyll、markdown&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt;：是一个开源的分布式版本控制系统，非常高效的项目版本管理工具。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;：是一个基于Git的非常流行的开源项目托管库。 利用GitHub，可以让全球各地的程序员们一起协作开发。GitHub提供了一种功能，叫GitHub Pages，利用这个功能，我们可以为项目建立网站，当然，这也意味着我们可以通过GitHub Pages 建立自己的网站。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;：是一个简单的，针对博客设计的静态网站生成器。使用GitHub和Jekyll，我们可以打造自己的独立博客，你可以自由地定制网站的风格，且是免费的。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;markdown&lt;/a&gt;： 是一种适用于网络的书写语言。严格的说它就是一种标记语言。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（二） 环境配置：我的工作环境是win7系统，因此遵从简单原则，我选择 &lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;RailsInstaller&lt;/a&gt;来搭建ruby环境（包含Ruby、Rails、Bundler、Git、Sqlite、TinyTDS、SQL Server support和DevKit。），然后来配置git和github；进而安装jekyll。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装ruby，上面已经说过了，推介用RailsInstaller（我下载的是railsinstaller-3.1.0.exe），具体步骤：（&lt;a href=&quot;http://www.cnblogs.com/tambor/archive/2011/12/25/rails_anzhuang_railsinstaller.html&quot;&gt;请参考&lt;/a&gt;）&lt;/p&gt;

    &lt;p&gt;1）、注册git用户，请登录 &lt;a href=&quot;https://github.com/join&quot;&gt;github&lt;/a&gt;，如图1：
 &lt;img src=&quot;/assets/blog-images/20150410125928.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;2）、安装步骤就不在这里说了，一路next下去。&lt;/p&gt;

    &lt;p&gt;3）、安装完会自动弹出git和shh的设置提示，哦，在做这个之前先要注册一个git用户，所以，就有了1）步骤&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 # Rails Environment Configuration.

 Your git configuration is incomplete.
 user.name and user.email are required for properly using git and services such
 as GitHub (https://github.com/).
	
  Please enter your name, for example mine is: Wayne E. Seguin
 name &amp;gt; F-olivia
 Setting user.name to F-olivia
	
  Please enter your email address, for example mine is: wayneeseguin@gmail.com
 email &amp;gt; xxxx@163.com
 Setting user.email to xxxx@163.com
 DL is deprecated, please use Fiddle
	
 git:
     user.name:  F-olivia
     user.email: xxxx@163.com
     version:    git version 1.9.4.msysgit.2

 ruby:
     bin:        D:/RailsInstaller/Ruby2.0.0/bin/ruby.exe
     version:    ruby 2.1.5p273 (2014-11-13 revision 48405) [i386-mingw32]

 rails:
     bin:        D:/RailsInstaller/Ruby2.0.0/bin/rails.bat
     version:    Rails 4.1.8
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;4）、填写github注册时的用户名和邮箱，就完成了公钥和密钥的生成，在C:\Documents and Settings\用户名下(C:\Users\xieax.ssh)，有个隐藏目录名为.ssh，id_rsa.pub文件就是公钥，id_rsa就是密钥。&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 ssh:
 public_key_location: C:\Users\xieax/.ssh/id_rsa.pub
 public_key_contents: ssh-rsa AAAAB3NzaC1yc2E........
 .............lGB3Nz F-olivia &amp;lt;xxxx@163.com&amp;gt;


 NOTES:
  		
 Your public ssh key (id_rsa.pub) has been automatically generated and copied to your clipboard.
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;5）、ssh密钥与github账户做关联，把4）步骤中文件id_rsa.pub复制，然后登录github找到“Account Settings” &amp;gt; Click “SSH Keys” &amp;gt; Click “Add SSH key”，把密钥串粘贴，如图1：
 &lt;img src=&quot;/assets/blog-images/20150410134022.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;6）、验证git连接，在开始菜单里找到RailsInstaller –&amp;gt; Git Bash，执行它，就打开了下面的命令窗口，以后的操作都是在这个窗口下进行的；输入命令：ssh -T git@github.com&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 $ ssh -T git@github.com
 1.The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.
 2.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
 3.Are you sure you want to continue connecting (yes/no)?
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;选择yes&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; Hi F-olivia! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;后续设置账户信息，看个人意愿了，我没有做这一步&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 1. git config --global user.name &quot;你的名字&quot;
 2. git config --global user.email &quot;your_email@youremail.com&quot;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;好了，git与github连接成功了，革命的道路走了一半了，继续加油！	&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装jekyll，这个比较繁琐，要安装一堆包（directory_watcher、liquid、open4、maruku和classifier，由于jekyll默认包是maruku来解析markdown，这里用kramdown），具体如下：&lt;/p&gt;

    &lt;p&gt;科普一下，Ruby是一种脚本语言，Gem是基于Ruby的一些开发工具包，Rails也算是一组Gem，专门用来做网站的。 而目前最好gem包是淘宝的。&lt;/p&gt;

    &lt;p&gt;1）、查看gem包，命令：gem soruces -l&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 C:\Sites&amp;gt;gem soruces -l
 ERROR:  While executing gem ... (Gem::CommandLineError)
 		Unknown command soruces
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;2）、更换成淘宝包&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---	
 C:\Sites&amp;gt;gem sources -a http://ruby.taobao.org/
 http://ruby.taobao.org/ added to sources
	
 C:\Sites&amp;gt;gem sources -l
 *** CURRENT SOURCES ***
	
 http://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;3）、安装jekyll，命令：gem install jekyll&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 C:\Sites&amp;gt;gem install jekyll
 Fetching: liquid-2.6.1.gem (100%)
 Successfully installed liquid-2.6.1
 Fetching: kramdown-1.5.0.gem (100%)
 Successfully installed kramdown-1.5.0
 ......
 Installing ri documentation for yajl-ruby-1.1.0-x86-mingw32
 Done installing documentation for blankslate, celluloid, classifier-reborn, colorator, fast-stemmer, ffi, hitimes, jekyll, jekyll-coffeescript, jekyll-gist, jekyll-paginate, jekyll-sass-converter, jekyll-watch, kramdown, liquid, listen, mercenary, parslet, posix-spawn, pygments.rb, rb-fsevent, rb-in
 otify, redcarpet, safe_yaml, timers, toml, yajl-ruby after 9 seconds
 27 gems installed
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;根据安装成功列表，可以和上面需要的包对照一下，如需安装的，用命令gem install 包名执行。&lt;/p&gt;

    &lt;p&gt;ok，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;markdown安装，windows下只能用MarkdownPad，这个更简单了，百度一个，一路next下去。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;好了，今天就到这里，明天继续，开始创建自己的blog。&lt;/p&gt;
</description>
                <link>http://F-olivia.github.io/ruby/2015/04/09/jekyll</link>
                <guid>http://F-olivia.github.io/ruby/2015/04/09/jekyll</guid>
                <pubDate>2015-04-09T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>git+github+markdown+jekyll blog系列（一）</title>
                <description>
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/ruby/2015/03/31/jekyll/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;目录：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;起因&lt;/li&gt;
&lt;li&gt;目标&lt;/li&gt;
&lt;li&gt;准备工作&lt;/li&gt;
&lt;li&gt;实现&lt;/li&gt;
&lt;li&gt;参考&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;section-1&quot;&gt;一、起因&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;缘起2012年看了一篇关于如何写简历的文章，介绍了Markdown文本编辑，还讲了&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; 上建立自己的技术blog，给自己加分项目；这时我才知道git以及github是什么东东，markdown又是啥东西？但我没有太多的关注这些东西。&lt;/li&gt;
  &lt;li&gt;2013年开始学习nosql的知识，发现很多关于git以及github的东西，这引起了我极大的好奇，怎么这些东西无处不在，原来他是开源的&lt;/li&gt;
  &lt;li&gt;这种冲动与日俱增，2013-1-24我给自己申请了github账号，准备着手建立自己blog，这样不用在qq上偶尔写写画画了。但是，对一个跟开源基本上不沾边的it民工，又不做互联网行当，自己搭建blog何其难啊？html、css、js等等，头大……&lt;/li&gt;
  &lt;li&gt;自从看了阮一峰的文章《[搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门]
(http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)》是使用
GitHub 和 Jekyll 搭建独立博客非常好的入门文章，&lt;strong&gt;强烈建议先阅读并操作一遍&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;发现搭建一个blog这么容易啊。于是，我开始着手实施这件事情，但还是历史悠久啊！&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;二、目标&lt;/h5&gt;

&lt;p&gt;期待的blog要至少满足以下要求：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;易写易读：使用者可以方便的编辑、管理文章，用户获取信息；&lt;/li&gt;
  &lt;li&gt;极简：尽量少的安装软件，使用少的命令，接触少的概念；&lt;/li&gt;
  &lt;li&gt;可用性：适应不同设备、浏览器访问，支持无障碍访问，只是关闭javascript访问&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;好了，就到这里吧，请看下回继续&lt;/p&gt;

</description>
                <link>http://F-olivia.github.io/ruby/2015/03/31/jekyll</link>
                <guid>http://F-olivia.github.io/ruby/2015/03/31/jekyll</guid>
                <pubDate>2015-03-31T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>你好，世界</title>
                <description>&lt;h2&gt;你好，世界&lt;/h2&gt;

&lt;p&gt;我的第一篇文章&lt;/p&gt;

&lt;p&gt;28 Mar 2015&lt;/p&gt;
</description>
                <link>http://F-olivia.github.io/%E6%97%A5%E5%BF%97/2015/03/28/markdonnote</link>
                <guid>http://F-olivia.github.io/%E6%97%A5%E5%BF%97/2015/03/28/markdonnote</guid>
                <pubDate>2015-03-28T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
