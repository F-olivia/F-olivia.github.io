<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
    <title>红薯的技术博客</title>
    <link href="http://F-olivia.github.io/" rel="self"/>
    <link href="http://F-olivia.github.io"/>
    <updated>2016-05-17T17:04:06+08:00</updated>
    <id>http://F-olivia.github.io</id>
    <author>
    <name>红薯</name>
    <email>axxa11@163.com</email>
    </author>


    <entry>
        <title>PostgreSQL学习系列（一）</title>
        <link href="http://F-olivia.github.io/database/2016/05/17/postgresql"/>
        <updated>2016-05-17T00:00:00+08:00</updated>
        <id>http://F-olivia.github.io/database/2016/05/17/postgresql</id>
        <content type="html">
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;F-olivia&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/database/2016/05/17/postgresql/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;目录&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;获取安装包&lt;/li&gt;
&lt;li&gt;PostgreSQL源码目录结构简介&lt;/li&gt;
&lt;li&gt;源码安装PostgreSQL&lt;/li&gt;
&lt;li&gt;PostgreSQL软件目录结构简介&lt;/li&gt;
&lt;li&gt;验证安装&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;环境：vmware9.0下OS centos 5.7 ；DB postgresql 9.1.2 &lt;/p&gt;

&lt;h5 id=&quot;section-1&quot;&gt;获取安装包&lt;/h5&gt;
&lt;p&gt;1.输入官方网址
http://www.postgresql.org/&lt;/p&gt;

&lt;p&gt;2.点击download标签页，进入点击“file browser”；
如图1：
&lt;img src=&quot;/assets/blog-images/20160513102252.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.进入后File Browser，会看到
如图2：
&lt;img src=&quot;/assets/blog-images/20160513102915.png&quot; alt=&quot;Alt text&quot; /&gt;
我选择了版本 v9.5.2，然后点击进去；&lt;/p&gt;

&lt;p&gt;4.进入就是源码包，我选择了postgresql-9.5.2.tar.bz2，
如图3：
&lt;img src=&quot;/assets/blog-images/20160513103214.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;postgresql&quot;&gt;PostgreSQL源码目录结构简介&lt;/h5&gt;
&lt;p&gt;1.解压安装包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# tar -jxvf postgresql-9.5.2.tar.bz2 
postgresql-9.5.2/
postgresql-9.5.2/.dir-locals.el
postgresql-9.5.2/contrib/
......
postgresql-9.5.2/.gitattributes
postgresql-9.5.2/aclocal.m4
postgresql-9.5.2/configure.in
postgresql-9.5.2/INSTALL
[root@localhost ~]# ll
total 18024
-rw-------. 1 root root     1089 May 12 00:28 anaconda-ks.cfg
drwxrwxrwx. 6 1107 1107     4096 Mar 29 04:23 postgresql-9.5.2
-rw-r--r--. 1 root root 18446616 May 13 17:56 postgresql-9.5.2.tar.bz2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.查看安装包目录结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost postgresql-9.5.2]# ll
total 636
-rw-r--r--.  1 1107 1107   1192 Mar 29 04:07 COPYRIGHT        --版权信息
-rw-r--r--.  1 1107 1107   3638 Mar 29 04:07 GNUmakefile.in   --Makefile 的雏形
-rw-r--r--.  1 1107 1107    283 Mar 29 04:07 HISTORY          --版本变更的历史说明
-rw-r--r--.  1 1107 1107  74597 Mar 29 04:23 INSTALL          --安装方法简要说明
-rw-r--r--.  1 1107 1107   1489 Mar 29 04:07 Makefile         --Makefile模版
-rw-r--r--.  1 1107 1107   1209 Mar 29 04:07 README           
-rw-r--r--.  1 1107 1107    385 Mar 29 04:07 aclocal.m4       --config 用的文件的一部分
drwxrwxrwx.  2 1107 1107   4096 Mar 29 04:20 config           --
-rwxr-xr-x.  1 1107 1107 462599 Mar 29 04:07 configure        --源码安装的配置脚本
-rw-r--r--.  1 1107 1107  73212 Mar 29 04:07 configure.in     --
drwxrwxrwx. 53 1107 1107   4096 Mar 29 04:20 contrib          --已打包到PG源码中的第三方贡献的插件源码
drwxrwxrwx.  3 1107 1107    101 Mar 29 04:20 doc              --文档目录
drwxrwxrwx. 15 1107 1107   4096 Mar 29 04:23 src              --源码目录
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一级目录：/config、/contrib、/doc、/src&lt;/p&gt;

&lt;p&gt;/config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost postgresql-9.5.2]# cd config
[root@localhost config]# ll
total 200
-rw-r--r--. 1 1107 1107   441 Mar 29 04:07 Makefile
-rw-r--r--. 1 1107 1107  3595 Mar 29 04:07 ac_func_accept_argtypes.m4
-rw-r--r--. 1 1107 1107  7066 Mar 29 04:07 acx_pthread.m4
-rw-r--r--. 1 1107 1107 18827 Mar 29 04:07 c-compiler.m4
-rw-r--r--. 1 1107 1107 12234 Mar 29 04:07 c-library.m4
-rwxr-xr-x. 1 1107 1107 43434 Mar 29 04:07 config.guess
-rwxr-xr-x. 1 1107 1107 36133 Mar 29 04:07 config.sub
-rw-r--r--. 1 1107 1107  2794 Mar 29 04:07 docbook.m4
-rw-r--r--. 1 1107 1107  5281 Mar 29 04:07 general.m4
-rwxr-xr-x. 1 1107 1107 13997 Mar 29 04:07 install-sh
-rw-r--r--. 1 1107 1107  4214 Mar 29 04:07 libtool.m4
-rwxr-xr-x. 1 1107 1107  1348 Mar 29 04:07 missing
-rw-r--r--. 1 1107 1107  2734 Mar 29 04:07 perl.m4
-rw-r--r--. 1 1107 1107  1252 Mar 29 04:07 prep_buildtree
-rw-r--r--. 1 1107 1107  8975 Mar 29 04:07 programs.m4
-rw-r--r--. 1 1107 1107  3860 Mar 29 04:07 python.m4
-rw-r--r--. 1 1107 1107  2451 Mar 29 04:07 tcl.m4
-rw-r--r--. 1 1107 1107   464 Mar 29 04:07 test_quiet_include.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/doc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost postgresql-9.5.2]# ll doc/
total 20
-rw-r--r--. 1 1107 1107  163 Mar 29 04:07 KNOWN_BUGS
-rw-r--r--. 1 1107 1107  163 Mar 29 04:07 MISSING_FEATURES
-rw-r--r--. 1 1107 1107  469 Mar 29 04:07 Makefile
-rw-r--r--. 1 1107 1107   75 Mar 29 04:07 TODO
-rw-r--r--. 1 1107 1107 1574 Mar 29 04:07 bug.template
drwxrwxrwx. 3 1107 1107   32 Mar 29 04:20 src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;contrib/&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost postgresql-9.5.2]# ll contrib/
total 172                                                     
-rw-r--r--. 1 1107 1107 1365 Mar 29 04:07 Makefile            --
-rw-r--r--. 1 1107 1107 1131 Mar 29 04:07 README              --
drwxrwxrwx. 2 1107 1107   88 Mar 29 04:20 adminpack           --一些管理函数
drwxrwxrwx. 2 1107 1107   40 Mar 29 04:20 auth_delay          --认证失败后延迟报异常, 可以防止暴力破解
drwxrwxrwx. 2 1107 1107   42 Mar 29 04:20 auto_explain        --将超过指定执行时间的SQL的执行计划输出到日志中
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 btree_gin           --gin索引方法的btree操作符扩展. 
															  --(在某些情况下&quot;多列gin组合索引&quot;比&quot;多个btree单列索引&quot;的bitmap anding更高效)
drwxrwxrwx. 5 1107 1107 4096 Mar 29 04:20 btree_gist          --gist索引方法的btree操作符扩展.
															  --(在组合索引中的某些列类型仅支持gist索引访问方法, 
															  --而另一些列的类型支持btree以及gist时btree_gist更为有效, 
															  --同时btree_gist还新增了&amp;lt;&amp;gt;用于排他约束,&amp;lt;-&amp;gt;用于近邻算法)
drwxrwxrwx. 2 1107 1107 4096 Mar 29 04:20 chkpass             --自动加密的字段类型(使用UNIX标准函数crypt()进行封装, 所以仅支持前8位安全) 
															  --&#39;abcdefghijkl&#39;::chkpass = &#39;abcdefgh&#39;
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 citext              --不区分大小写的数据类型.
-rw-r--r--. 1 1107 1107   85 Mar 29 04:07 contrib-global.mk   --
drwxrwxrwx. 5 1107 1107 4096 Mar 29 04:23 cube                --多维立方体类型, 支持多维立方体对象的相同,相交,包含等运算
drwxrwxrwx. 6 1107 1107 4096 Mar 29 04:20 dblink              --PostgreSQL跨库操作插件
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 dict_int            --全文检索的一个字典模板, 用于控制数字被拆分的最大长度. 以控制数字在全文检索中的分词个数.
															  --(maxlen =6: 12345678 -&amp;gt; 123456 截断成6个, rejectlong =true则忽略这个分词)
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 dict_xsyn           --全文检索的一个字典模块, 设置分词的同义词, 支持同义词匹配.
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 earthdistance       --可以使用cube或point类型计算地球表面两点之间的距离
drwxrwxrwx. 7 1107 1107 4096 Mar 29 04:20 file_fdw            --文件外部表模块
drwxrwxrwx. 2 1107 1107 4096 Mar 29 04:20 fuzzystrmatch       --单字节字符串之间的相似性判断
drwxrwxrwx. 5 1107 1107 4096 Mar 29 04:20 hstore              --hstore用于存储k-v数据类型, 同时这个插件还提供了比较多的K-V类型相关的函数和操作符.
															  --例如提供数组,json,hstore之间的转换. k-v的存在判断,删除k-v值.
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 hstore_plperl       --
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 hstore_plpython     --
drwxrwxrwx. 2 1107 1107   98 Mar 29 04:20 intagg              --int类型的数组聚合函数.(内建的array_agg函数已包含这个功能)
drwxrwxrwx. 6 1107 1107 4096 Mar 29 04:20 intarray            --int类型的数组功能扩展库, 提供了一些常用的函数和操作符
															  --(数组元素个数, 元素排序, 元素下标, 取元素子集, 相交, 包含, 增加元素, 删除元素, 合并等)
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 isn                 --提供国际通用的产品标识码数据类型, 例如ISBN, ISMN...
drwxrwxrwx. 2 1107 1107 4096 Mar 29 04:20 lo                  --大对象的一个可选模块, lo类型以及自动unlink大对象的触发器. 
															  --方便大对象在消亡后的自动unlink, 防止大对象存储泄漏(类似内存泄漏).
drwxrwxrwx. 5 1107 1107 4096 Mar 29 04:20 ltree               --异构数据类型以及操作函数和操作符. 例如China.Zhejiang.Hang &amp;lt;@&#39;China&#39;
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 ltree_plpython      --
drwxrwxrwx. 2 1107 1107   55 Mar 29 04:20 oid2name            --oid转换成name的命令行工具, 不属于extension. 或通过系统表查询得到.
drwxrwxrwx. 2 1107 1107 4096 Mar 29 04:20 pageinspect         --用于读取数据库PAGE裸信息的插件, 可以读main, fsm, vmFORK的页数据, 一般用于debug.
															  --(使用时请参照对应数据库版本的头文件解读信息)
drwxrwxrwx. 2 1107 1107   43 Mar 29 04:20 passwordcheck       --创建用户或者修改用户密码时, 检查密码的安全性, 如果太弱的话, 将返回错误.
drwxrwxrwx. 2 1107 1107 4096 Mar 29 04:20 pg_buffercache      --输出当前的shared buffer的状态数据(细化到page number)
drwxrwxrwx. 2 1107 1107 4096 Mar 29 04:20 pg_freespacemap     --输出对象指定page或所有page的free space map信息.
drwxrwxrwx. 2 1107 1107   91 Mar 29 04:20 pg_prewarm          --加载关系数据到操作系统缓冲区缓存或PostgreSQL缓冲区缓存。
drwxrwxrwx. 2 1107 1107   57 Mar 29 04:20 pg_standby          --8.4以及以前的版本方便于创建warm standby的命令行工具
drwxrwxrwx. 2 1107 1107 4096 Mar 29 04:20 pg_stat_statements  --跟踪数据库的SQL, 收集SQL的统计信息.
drwxrwxrwx. 5 1107 1107 4096 Mar 29 04:20 pg_trgm             --将字符串拆分成3个一组的多个单元, 用于测试两个字符串之间的近似度. 比分词更加暴力.
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 pgcrypto            --PostgreSQL的服务端数据加密的扩展库
drwxrwxrwx. 2 1107 1107 4096 Mar 29 04:20 pgrowlocks          --(从行头信息中的infomask获取行锁信息), 注意输出的不是snapshot.
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 pgstattuple         --行级统计信息(dead tuples, live tuples, table_len, free_space,free_percent), 索引的统计信息.
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 postgres_fdw        --postgresql跨库的外部表插件
drwxrwxrwx. 5 1107 1107 4096 Mar 29 04:23 seg                 --线段类型和浮点数的区间类型. 以及相关的操作符, 索引访问方法等.
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 sepgsql             --基于SELinux安全策略的访问控制模块.
drwxrwxrwx. 2 1107 1107 4096 Mar 29 04:20 spi                 --一些服务端的触发器函数(例如跟踪记录的存活时间, 被哪个用户修改了,记录的修改时间等).
drwxrwxrwx. 2 1107 1107 4096 Mar 29 04:20 sslinfo             --输出ssl认证的客户端的一些认证信息.
drwxrwxrwx. 3 1107 1107   42 Mar 29 04:20 start-scripts       --数据库启动脚本模板
drwxrwxrwx. 5 1107 1107 4096 Mar 29 04:20 tablefunc           --一般可用于行列变换, 异构数据处理等.
drwxrwxrwx. 2 1107 1107   70 Mar 29 04:20 tcn                 --提供异步消息输出的触发器.
drwxrwxrwx. 5 1107 1107 4096 Mar 29 04:20 test_decoding       --逻辑解码输出插件的一个示例.
drwxrwxrwx. 5 1107 1107 4096 Mar 29 04:20 tsearch2            --在文本搜索整合到内核PostgreSQL 版本8.3之前的应用提供后向兼容的文本搜索功能.
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 tsm_system_rows     --
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 tsm_system_time     --
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 unaccent            --全文检索相关的插件
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 uuid-ossp           --生成UUID的插件
drwxrwxrwx. 2 1107 1107   55 Mar 29 04:20 vacuumlo            --大对象垃圾回收的命令
drwxrwxrwx. 4 1107 1107 4096 Mar 29 04:20 xml2                --xml相关插件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/src&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost postgresql-9.5.2]# ll src/
total 116
-rw-r--r--.  1 1107 1107   173 Mar 29 04:07 DEVELOPERS          --面向开发人员的注释
-rw-r--r--.  1 1107 1107  1961 Mar 29 04:07 Makefile            --
-rw-r--r--.  1 1107 1107 26379 Mar 29 04:07 Makefile.global.in  --
-rw-r--r--.  1 1107 1107 16409 Mar 29 04:07 Makefile.shlib      --共享库用的Makefile
drwxrwxrwx. 25 1107 1107  4096 Mar 29 04:20 backend             --后台进程相关的源码(包括postmaster, optimizer, replication,checkpoint, access,... 等等)
-rw-r--r--.  1 1107 1107  1226 Mar 29 04:07 bcc32.mak           --
drwxrwxrwx. 19 1107 1107  4096 Mar 29 04:20 bin                 --客户端进程的源码(例如initdb, psql, pg_dump等等)
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 common              --公共组件库代码
drwxrwxrwx. 27 1107 1107  4096 Mar 29 04:23 include             --头文件
drwxrwxrwx.  4 1107 1107    44 Mar 29 04:20 interfaces          --前端相关的库的代码(交互接口的源码；例如ecpg, libpq)
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 makefiles           --
-rw-r--r--.  1 1107 1107  5906 Mar 29 04:07 nls-global.mk       --
drwxrwxrwx.  6 1107 1107    73 Mar 29 04:20 pl                  --过程语言的源码(例如plperl, plpgsql, plpython, pltcl)
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 port                --平台移植相关的代码
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 template            --不同OS平台下的编译器选项模板
drwxrwxrwx. 11 1107 1107  4096 Mar 29 04:20 test                --测试相关的源码
drwxrwxrwx.  4 1107 1107  4096 Mar 29 04:20 timezone            --(从http://www.iana.org/time-zones同步的时区库)
drwxrwxrwx. 10 1107 1107  4096 Mar 29 04:20 tools               --编译过程中用到的一些命令行工具
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 tutorial            --包含基本的SQL教程脚本
-rw-r--r--.  1 1107 1107   760 Mar 29 04:07 win32.mak           --Win32 Makefile (Visual C++ 用)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里比较核心的是backend,bin,interface这几个目录。Backend是对应于后端，bin和interface对应于前端。bin里面有pgsql,initdb,pg_dump等各种工具的代码。interface里面有PostgreSQL的C语言的库libpq,另外可以在C里嵌入SQL的ECPG命令的相关代码。
Backend目录的结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost postgresql-9.5.2]# ll src/backend/      
total 96
-rw-r--r--.  1 1107 1107 11299 Mar 29 04:07 Makefile        
drwxrwxrwx. 14 1107 1107  4096 Mar 29 04:20 access       --各种存储访问方法(在各个子目录下) 
														 --common(共同函数)、gin (Generalized Inverted Index通用逆向索引)
 														 --gist (Generalized  Search Tree通用索引)、 hash (哈希索引)、heap (heap的访问方法)、
														 --index (通用索引函数)、 nbtree (Btree函数)、transam (事务处理)   
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:22 bootstrap    --数据库的初始化处理(initdb的时候)
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:23 catalog      --系统目录
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 commands     --SELECT/INSERT/UPDATE/DELETE以为的SQL文的处理   
-rw-r--r--.  1 1107 1107  1349 Mar 29 04:07 common.mk    --
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 executor     --执行器(访问的执行)                             
drwxrwxrwx.  2 1107 1107    37 Mar 29 04:20 foreign      --FDW(Foreign Data Wrapper)处理                  
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 lib          --共同函数                                   
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 libpq        --前端/后端通信处理                          
drwxrwxrwx.  2 1107 1107    34 Mar 29 04:20 main         --postgres的主函数                           
-rw-r--r--.  1 1107 1107   733 Mar 29 04:07 nls.mk       --                   
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 nodes        --构文树节点相关的处理函数
drwxrwxrwx.  7 1107 1107    89 Mar 29 04:20 optimizer    --优化器
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:22 parser       --SQL构文解析器
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 po           --
drwxrwxrwx.  8 1107 1107  4096 Mar 29 04:23 port         --平台相关的代码
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 postmaster   --postmaster的主函数 (常驻postgres)
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 regex        -- 正则处理
drwxrwxrwx.  4 1107 1107  4096 Mar 29 04:23 replication  --streaming replication 
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 rewrite      --规则及视图相关的重写处理  
drwxrwxrwx.  4 1107 1107  4096 Mar 29 04:20 snowball     --全文检索相关（语干处理）  
drwxrwxrwx. 10 1107 1107  4096 Mar 29 04:20 storage      --共享内存、磁盘上的存储、缓存等全部一次/二次记录管理(以下的目录)
														 --buffer/(缓存管理)、 file/(文件)、freespace/(Fee Space Map管理) 
														 --ipc/(进程间通信)、large_object /(大对象的访问函数)、 
														 --lmgr/(锁管理)、page/(页面访问相关函数)、 smgr/(存储管理器)
drwxrwxrwx.  2 1107 1107    99 Mar 29 04:20 tcop         --postgres (数据库引擎的进程)的主要部分
drwxrwxrwx.  2 1107 1107  4096 Mar 29 04:20 tsearch      --全文检索
drwxrwxrwx. 14 1107 1107  4096 Mar 29 04:23 utils        --各种模块(以下目录) 
														 --adt/(嵌入的数据类型)、cache/(缓存管理)、 error/(错误处理)、fmgr/(函数管理)、
														 --hash/(hash函数)、init/(数据库初始化、postgres的初期处理)、 mb/(多字节文字处理)、
														 --misc/(其他)、mmgr/(内存的管理函数)、 resowner/(查询处理中的数据(buffer pin及表锁)的管理)、
														 --sort/(排序处理)、time/(事务的 MVCC 管理)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;postgresql-1&quot;&gt;源码安装PostgreSQL&lt;/h5&gt;

&lt;p&gt;1.配置（Configuration）&lt;/p&gt;

&lt;p&gt;./configure –prefix=/opt/pgsql9.5.2 –with-pgport=1921 –with-perl –with-tcl –with-python –with-openssl –with-pam –without-ldap –with-libxml –with-libxslt –enable-thread-safety –with-wal-blocksize=16 –with-blocksize=16 –enable-dtrace –enable-debug&lt;/p&gt;

&lt;p&gt;1）配置选项&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--prefix=/opt/pgsql9.5.2：安装所有文件在/opt/pgsql9.5.2中（取代默认时的/usr/local/pgsql）。
--with-pgport=1921：为服务器和客户端设置默认端口号。默认是5432。
--with-perl：编译PL/Perl服务端语言。
--with-python：编译PL/Python服务端语言。
--with-tcl：编译PL/Tcl服务端语言。
--with-openssl：编译支持SLL（加密）连接。这需要安装OpenSSL包。
--with-pam：编译支持PAM（Pluggable Authentication Modules，可插拔认证模块）
--without-ldap：编译支持认证和连接参数检查
--with-libxml：编译libxml（支持SQL/XML），支持这个选项需要Libxml 2.6.23及最新版
--with-libxslt：编译xml2模块，使用libxslt
--enable-thread-safety：让客户端库是线程安全的；允许在libpq和ECPG程序里的并发线程安全地控制他们私有的连接句柄。
--with-wal-blocksize=16：WAL：预写式日志（Write-Ahead Logging）设置WAL块大小，以KB为单位。这是WAL日志中存储和I/O单元。默认情况下，8KB，适用于大多数情况； 但是其它的值可能在特殊情况下是有用的。该值必须是1和64之间（KB）2的幂。请注意，改变这个值需要初始化数据库。
--with-blocksize=16：设置block size，以KB为单位。这是表的存储和IO单元。默认为8K,适用于大多数情况；但是在特殊场合中，其他的值可能是非常有用的。这个值必须是2的1到32次方（KB）。注意,改变这个值需要一个initdb。
--enable-dtrace：编译PostgreSQL支持动态跟踪工具DTrace
--enable-debug：把所有程序和库以带有调试符号的方式编译
--enable-nls[=LANGUAGES]:打开本地语言支持(NLS)，即以非英文显示程序的信息的能力。LANGUAGES是一个空格分隔的语言代码列表，标识你想支持的语言。比如--enable-nls=&#39;de fr&#39;。（你提供的列表和实际支持的列表之间的交集将会自动计算出来。）如果你没有声明一个列表，那么就安装所有可用的翻译。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2）configure时，遇到问题及解决，由于没有事先检查这些安装包是否安装，基本上都报错了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a.dtrace：缺少systemtap工具，需要安装systemtap-devel、systemtap-client和systemtap-runtime这3个包。其中systemtap-sdt-devel是编译PostgreSQL时，选项--enable-dtrace需要的包。

---
	在CentOS中安装systemtap：
	在安装systemtap前，要保证kernel对应的kernel-devel包的版本保持一致：
	
	检查：
	[root@localhost ~]# rpm -qa|grep kernel
	[root@localhost ~]# uname -a
	
	不一致的话，则安装对应的kernel-devel版本或者升级kernel：
	[root@localhost ~]# yum install kernel-devel
	或：[root@localhost ~]# yum update kernel
	重启服务器。
	
	安装systemtap
	[root@localhost ~]# yum install systemtap systemtap-sdt-devel
	
	使用命令：
	[root@localhost ~]# rpm -qf /usr/bin/stap
	systemtap-devel-2.3-4.el6_5.x86_64
	systemtap-client-2.3-4.el6_5.x86_64
	rpm -qf：查询文件隶属的软件包
	
	检查stap是否正常
	[root@localhost postgresql-9.5.2]# stap
	A script must be specified.
	Try &#39;--help&#39; for more information.
	[root@localhost postgresql-9.5.2]# stap -ve &#39;probe begin { log(&quot;hello world&quot;) exit() }&#39;
	Pass 1: parsed user script and 110 library script(s) using 116404virt/37456res/2968shr/34832data kb, in 110usr/70sys/193real ms.
	Pass 2: analyzed script: 1 probe(s), 2 function(s), 0 embed(s), 0 global(s) using 117064virt/38248res/3092shr/35492data kb, in 10usr/0sys/4real ms.
	Pass 3: translated to C into &quot;/tmp/stapdzwQoj/stap_4b5600e768dc4f7653aec2a6f0b84c1b_1030_src.c&quot; using 117064virt/38852res/3632shr/35492data kb, in 0usr/0sys/1real ms.
	Pass 4: compiled C into &quot;stap_4b5600e768dc4f7653aec2a6f0b84c1b_1030.ko&quot; in 5020usr/1800sys/7369real ms.
	Pass 5: starting run.
	hello world
	Pass 5: run completed in 10usr/40sys/333real ms.
	
	stap调试好后，PostgreSQL编译时必须开启dtrace支持，即--enable-dtrace。
---

b.configure: error: could not determine flags for linking embedded Perl.

---
	[root@localhost postgresql-9.5.2]# yum install perl-ExtUtils-Embed
	Loaded plugins: fastestmirror, langpacks
	Loading mirror speeds from cached hostfile
	 * base: ftp.sjtu.edu.cn
	......
	Installed:
  perl-ExtUtils-Embed.noarch 0:1.30-286.el7                                                  

Dependency Installed:
  gdbm-devel.x86_64 0:1.10-8.el7                libdb-devel.x86_64 0:5.3.21-19.el7          
  perl-ExtUtils-Install.noarch 0:1.58-286.el7   perl-ExtUtils-MakeMaker.noarch 0:6.68-3.el7 
  perl-ExtUtils-Manifest.noarch 0:1.61-244.el7  perl-ExtUtils-ParseXS.noarch 1:3.18-2.el7   
  perl-devel.x86_64 4:5.16.3-286.el7           

Complete!
--- 
后面的问题包，我就不详细罗列安装内容了

c.configure: error: readline library not found
[root@localhost postgresql-9.5.2]# yum install readline-devel.x86_64
readline选项，是默认安装的，结果我没有选择不按装导致的；该选项允许psql（PostgreSQL命令行SQL解释器）记住每个键入的命令， 并允许你使用箭头键来调用和编辑以前的命令。这是非常有帮助的，强烈推荐。

d.configure: error: zlib library not found
[root@localhost postgresql-9.5.2]# yum install zlib-devel.x86_64
缺省的时候将使用zlib压缩库。如果你不想使用它， 那么你必须给configure声明--without-zlib选项。

e.configure: error: library &#39;crypto&#39; is required for OpenSSL
[root@localhost postgresql-9.5.2]# yum install openssl openssl-devel

f.configure: error: library &#39;pam&#39; is required for PAM
[root@localhost postgresql-9.5.2]# yum install pam pam-devel

g.configure: error: library &#39;xml2&#39; (version &amp;gt;= 2.6.23) is required for XML support
[root@localhost postgresql-9.5.2]# yum install libxml2 libxml2-devel

h.configure: error: library &#39;xslt&#39; is required for XSLT support
[root@localhost postgresql-9.5.2]# yum install libxslt libxslt-devel

i.configure: error: Tcl shell not found
[root@localhost postgresql-9.5.2]# yum install tcl tcl-devel

j.configure: error: header file is required for LDAP
[root@localhost postgresql-9.5.2]# yum install openldap openldap-devel

k.configure: error: header file &amp;lt;Python.h&amp;gt; is required for Python
[root@localhost postgresql-9.5.2]# yum install python python-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;configure终于完成，还是前期工作没做好，这里参考了&lt;a href=&quot;http://my.oschina.net/tashi/blog/189351&quot;&gt;博文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.编译：gmake world（make world安装包含了文档，所有的contrib）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost postgresql-9.5.2]# gmake world
gmake -C doc all
gmake[1]: Entering directory `/root/postgresql-9.5.2/doc&#39;
gmake -C src all
gmake[2]: Entering directory `/root/postgresql-9.5.2/doc/src&#39;
gmake -C sgml all
......
gmake[2]: Leaving directory `/root/postgresql-9.5.2/contrib/ltree_plpython&#39;
gmake[1]: Leaving directory `/root/postgresql-9.5.2/contrib&#39;
PostgreSQL, contrib, and documentation successfully made. Ready to install.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.安装：gmake install-world（带world参数可以安装PG的附属信息，如文档，帮助等）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost postgresql-9.5.2]# gmake install-world
gmake -C doc install
gmake[1]: Entering directory `/root/postgresql-9.5.2/doc&#39;
gmake -C src install
gmake[2]: Entering directory `/root/postgresql-9.5.2/doc/src&#39;
gmake -C sgml install
......
gmake[2]: Leaving directory `/root/postgresql-9.5.2/contrib/ltree_plpython&#39;
gmake[1]: Leaving directory `/root/postgresql-9.5.2/contrib&#39;
PostgreSQL, contrib, and documentation installation complete.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.配置PG&lt;/p&gt;

&lt;p&gt;1）新建用户&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# groupadd postgres
[root@localhost ~]# useradd -g postgres postgres
[root@localhost ~]# passwd postgres
Changing password for user postgres.
New password: 
BAD PASSWORD: The password contains the user name in some form
Retype new password: 
passwd: all authentication tokens updated successfully.
[root@localhost ~]# su - postgres
[postgres@localhost ~]$ ll
æ€»ç”¨é‡ 0
[postgres@localhost ~]$ export LANG=C
[postgres@localhost ~]$ ll
total 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2）创建数据库目录以及设置权限&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost pgsql9.5.2]# mkdir -p /db/pgdata
[root@localhost ~]# cd /
[root@localhost /]# ll \ grep db
ls: cannot access  grep: No such file or directory
db:
total 0
drwxr-xr-x. 2 root root 6 May 17 16:52 pgdata
[root@localhost /]# chown -R postgres:postgres /db/pgdata
[root@localhost /]# ll \ grep db
ls: cannot access  grep: No such file or directory
db:
total 0
drwxr-xr-x. 2 postgres postgres 6 May 17 16:52 pgdata
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3）设置环境变量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a.add .bash_profile

[postgres@localhost ~]$ vi bash_profile
# .bash_profile

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
        . ~/.bashrc
fi

# User specific environment and startup programs

PATH=$PATH:$HOME/.local/bin:$HOME/bin

export PATH

export PS1=&quot;$USER@`/bin/hostname -s`-&amp;gt; &quot;
export PGHOME=/opt/pgsql9.5.2
export PGDATA=/db/pgdata
export PGPORT=1921
export PATH=$PGHOME/bin:$PATH
export MANPATH=$PGHOME/share/man:$MANPATH
export LANG=en_US.utf8
export DATE=`date +&quot;%Y%m%d%H%M&quot;`
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH
export PGUSER=postgres
export PGHOST=$PGDATA
alias rm=&#39;rm  -i&#39;
alias ll=&#39;ls -lh&#39;

&quot;.bash_profile&quot; 26L, 634C written                                           
[postgres@localhost ~]$ source .bash_profile 
postgres@localhost-&amp;gt; which psql
/opt/pgsql9.5.2/bin/psql
postgres@localhost-&amp;gt; psql -V
psql (PostgreSQL) 9.5.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4）初始化数据库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;postgres@localhost-&amp;gt; initdb -D $PGDATA -E UTF8 --locale=C -U postgres -W
The files belonging to this database system will be owned by user &quot;postgres&quot;.
This user must also own the server process.

The database cluster will be initialized with locale &quot;C&quot;.
The default text search configuration will be set to &quot;english&quot;.

Data page checksums are disabled.

fixing permissions on existing directory /db/pgdata ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 128MB
selecting dynamic shared memory implementation ... posix
creating configuration files ... ok
creating template1 database in /db/pgdata/base/1 ... ok
initializing pg_authid ... ok
Enter new superuser password: 
Enter it again: 
setting password ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects&#39; descriptions ... ok
creating collations ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
loading PL/pgSQL server-side language ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok
syncing data to disk ... ok

WARNING: enabling &quot;trust&quot; authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.

Success. You can now start the database server using:

    pg_ctl -D /db/pgdata -l logfile start

postgres@localhost-&amp;gt; cd /db/pgdata/
postgres@localhost-&amp;gt; ll
total 48K
drwx------. 5 postgres postgres   38 May 17 17:32 base						--pg default表空间目录
drwx------. 2 postgres postgres 4.0K May 17 17:32 global					--全局变量
drwx------. 2 postgres postgres   17 May 17 17:32 pg_clog
drwx------. 2 postgres postgres    6 May 17 17:32 pg_commit_ts
drwx------. 2 postgres postgres    6 May 17 17:32 pg_dynshmem
-rw-------. 1 postgres postgres 4.4K May 17 17:32 pg_hba.conf				--网关配置文件
-rw-------. 1 postgres postgres 1.6K May 17 17:32 pg_ident.conf
drwx------. 4 postgres postgres   37 May 17 17:32 pg_logical
drwx------. 4 postgres postgres   34 May 17 17:32 pg_multixact
drwx------. 2 postgres postgres   17 May 17 17:32 pg_notify
drwx------. 2 postgres postgres    6 May 17 17:32 pg_replslot
drwx------. 2 postgres postgres    6 May 17 17:32 pg_serial
drwx------. 2 postgres postgres    6 May 17 17:32 pg_snapshots
drwx------. 2 postgres postgres    6 May 17 17:32 pg_stat
drwx------. 2 postgres postgres    6 May 17 17:32 pg_stat_tmp
drwx------. 2 postgres postgres   17 May 17 17:32 pg_subtrans
drwx------. 2 postgres postgres    6 May 17 17:32 pg_tblspc
drwx------. 2 postgres postgres    6 May 17 17:32 pg_twophase
-rw-------. 1 postgres postgres    4 May 17 17:32 PG_VERSION
drwx------. 3 postgres postgres   58 May 17 17:32 pg_xlog
-rw-------. 1 postgres postgres   88 May 17 17:32 postgresql.auto.conf
-rw-------. 1 postgres postgres  22K May 17 17:32 postgresql.conf			--配置文件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5）修改主配置文件及内核参数&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pg_hba.conf用于配置控制访问数据库的来源;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;postgresql.conf是数据库的主配置文件, 最好也调整一下Linux内核参数.&lt;/p&gt;

    &lt;p&gt;a.Linux内核相关参数调整&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;[root@localhost ~]# vi /etc/sysctl.conf
# System default settings live in /usr/lib/sysctl.d/00-system.conf.
# To override those settings, enter new settings here, or in an /etc/sysctl.d/&amp;lt;name&amp;gt;.conf file
# For more information, see sysctl.conf(5) and sysctl.d(5).
#
....... 增加以下参数
kernel.shmmni = 4096
kernel.sem = 50100 64128000 50100 1280
fs.file-max = 7672460
net.ipv4.ip_local_port_range = 9000 65000
net.core.rmem_default = 1048576
net.core.rmem_max = 4194304
net.core.wmem_default = 262144
net.core.wmem_max = 1048576
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# vi /etc/security/limits.conf 
# /etc/security/limits.conf
#
......增加以下参数

* soft nofile 131072

* hard nofile 131072

* soft nproc 131072

* hard nproc 131072

* soft core unlimited

* hard core unlimited

* soft memlock 50000000
* hard memlock 50000000
&quot;/etc/security/limits.conf&quot; 69L, 2596C written

b. pg_hba.conf

postgres@localhost-&amp;gt; vi pg_hba.conf 
# PostgreSQL Client Authentication Configuration File
......增加一项
host all all 0.0.0.0/0 md5

c.postgresql.conf

postgres@localhost-&amp;gt; vi postgresql.conf 
# -----------------------------
# PostgreSQL configuration file
# -----------------------------
......以下参数调整
listen_addresses = &#39;0.0.0.0&#39; 
port = 1921   
unix_socket_permissions = 0700
tcp_keepalives_idle = 60
vacuum_cost_delay = 10
bgwriter_delay = 20ms 
synchronous_commit = on
wal_writer_delay = 20ms
log_destination = &#39;csvlog&#39;
log_directory = &#39;pg_log&#39;             
log_filename = &#39;postgresql-%Y-%m-%d_%H%M%S.log&#39; 
log_file_mode = 0600                   
log_truncate_on_rotation = on 
log_rotation_age = 1d
log_rotation_size = 10MB 
log_checkpoints = on
log_connections = on
log_disconnections = on
log_error_verbosity = verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6）启动，登录pg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;postgres@localhost-&amp;gt; pg_ctl start
server starting
postgres@localhost-&amp;gt; LOG:  00000: ending log output to stderr
HINT:  Future log output will go to log destination &quot;csvlog&quot;.
LOCATION:  PostmasterMain, postmaster.c:1219
LOG:  00000: database system was shut down at 2016-05-17 17:32:21 CST
LOCATION:  StartupXLOG, xlog.c:5909
LOG:  00000: MultiXact member wraparound protections are now enabled
LOCATION:  SetOffsetVacuumLimit, multixact.c:2629
LOG:  00000: database system is ready to accept connections
LOCATION:  reaper, postmaster.c:2788
LOG:  00000: autovacuum launcher started
LOCATION:  AutoVacLauncherMain, autovacuum.c:413

postgres@localhost-&amp;gt; psql -h 127.0.0.1 -p 1921 -U postgres postgres
LOG:  00000: connection received: host=127.0.0.1 port=62381
LOCATION:  BackendInitialize, postmaster.c:4085
LOG:  00000: connection authorized: user=postgres database=postgres
LOCATION:  PerformAuthentication, postinit.c:259
psql (9.5.2)
Type &quot;help&quot; for help.

postgres=# \dt
No relations found.

postgres=# select version();
                                                 version                                     
            
---------------------------------------------------------------------------------------------
------------
 PostgreSQL 9.5.2 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5
-4), 64-bit
(1 row)

postgres=# \q
LOG:  00000: disconnection: session time: 0:00:23.637 user=postgres database=postgres host=127.0.0.1 port=62385
LOCATION:  log_disconnections, postgres.c:4467
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;postgresql-2&quot;&gt;PostgreSQL软件目录结构简介&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;drwx------. 5 postgres postgres   38 May 17 17:32 base                -- 这个目录对应pg_default表空间  
drwx------. 2 postgres postgres 4.0K May 17 22:55 global              --这个目录对应pg_global表空间, 存放集群中的共享对象例pg_database表, 
                                                                      (select relkind,relname from pg_class where reltablespace = 
                                                                                                                (select oid from pg_tablespace where spcname=‘pg_global’) 
                                                                                                                order by 1) , 包含控制文件等.     
drwx------. 2 postgres postgres   17 May 17 17:32 pg_clog             -- 存储事务提交状态数据                                                                                                                                                                                                      
drwx------. 2 postgres postgres    6 May 17 17:32 pg_commit_ts        
drwx------. 2 postgres postgres    6 May 17 17:32 pg_dynshmem         
-rw-------. 1 postgres postgres 4.4K May 17 18:59 pg_hba.conf         -- 数据库访问控制文件 
-rw-------. 1 postgres postgres 1.6K May 17 17:32 pg_ident.conf       
drwx------. 2 postgres postgres   84 May 17 22:55 pg_log              -- 数据库日志目录(根据配置定义, 可能没有这个目录) 
drwx------. 4 postgres postgres   37 May 17 17:32 pg_logical          
drwx------. 4 postgres postgres   34 May 17 17:32 pg_multixact        -- 共享行锁的事务状态数据         
drwx------. 2 postgres postgres   17 May 17 22:55 pg_notify           -- 异步消息相关的状态数据         
drwx------. 2 postgres postgres    6 May 17 17:32 pg_replslot         
drwx------. 2 postgres postgres    6 May 17 17:32 pg_serial           -- 串行隔离级别的事务状态数据            
drwx------. 2 postgres postgres    6 May 17 17:32 pg_snapshots        -- 存储执行了事务snapshot导出的状态数据  
drwx------. 2 postgres postgres    6 May 17 22:55 pg_stat             
drwx------. 2 postgres postgres   40 May 17 22:55 pg_stat_tmp         -- 统计信息的临时文件
drwx------. 2 postgres postgres   17 May 17 17:32 pg_subtrans         -- 子事务状态数据    
drwx------. 2 postgres postgres    6 May 17 17:32 pg_tblspc           -- 表空间的软链接目录
drwx------. 2 postgres postgres    6 May 17 17:32 pg_twophase         -- 二阶事务的状态数据
-rw-------. 1 postgres postgres    4 May 17 17:32 PG_VERSION          -- 数据库版本        
drwx------. 3 postgres postgres   58 May 17 17:32 pg_xlog             -- 存储WAL文件       
-rw-------. 1 postgres postgres   88 May 17 17:32 postgresql.auto.conf
-rw-------. 1 postgres postgres  22K May 17 22:52 postgresql.conf     -- 配置文件                                                                                
-rw-------. 1 postgres postgres   29 May 17 22:55 postmaster.opts     -- 记录数据库启动时的命令行选项                                                            
-rw-------. 1 postgres postgres   65 May 17 22:55 postmaster.pid      -- 数据库启动的主进程信息文件(包括$PGDATA目录, 数据库启动时间, 监听端口ipc信息等)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;section-2&quot;&gt;验证安装&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;postgres@localhost-&amp;gt; psql
psql (9.5.2)
Type &quot;help&quot; for help.

postgres=# \q
postgres@localhost-&amp;gt; createdb test
postgres@localhost-&amp;gt; psql -l
                             List of databases
   Name    |  Owner   | Encoding | Collate | Ctype |   Access privileges   
-----------+----------+----------+---------+-------+-----------------------
 postgres  | postgres | UTF8     | C       | C     | 
 template0 | postgres | UTF8     | C       | C     | =c/postgres          +
           |          |          |         |       | postgres=CTc/postgres
 template1 | postgres | UTF8     | C       | C     | =c/postgres          +
           |          |          |         |       | postgres=CTc/postgres
 test      | postgres | UTF8     | C       | C     | 
(4 rows)

postgres@localhost-&amp;gt; psql test
psql (9.5.2)
Type &quot;help&quot; for help.

test=# \d
No relations found.
test=# create table t1(id int,name varchar(30));
CREATE TABLE
test=# create table t2(id int);
CREATE TABLE
test=# \d
        List of relations
 Schema | Name | Type  |  Owner   
--------+------+-------+----------
 public | t1   | table | postgres
 public | t2   | table | postgres
(2 rows)

test=# \d t1
             Table &quot;public.t1&quot;
 Column |         Type          | Modifiers 
--------+-----------------------+-----------
 id     | integer               | 
 name   | character varying(30) | 

test=# insert into t1(id,name) values(1,&#39;xax&#39;);
INSERT 0 1
test=# select * from t1;
 id | name 
----+------
  1 | xax
(1 row)
&lt;/code&gt;&lt;/pre&gt;

</content>
    </entry>
 
    <entry>
        <title>mysql学习系列（四）</title>
        <link href="http://F-olivia.github.io/database/2015/11/26/mysql"/>
        <updated>2015-11-26T00:00:00+08:00</updated>
        <id>http://F-olivia.github.io/database/2015/11/26/mysql</id>
        <content type="html">
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/database/2015/11/26/mysql/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;四、日期类型&lt;/h5&gt;

&lt;p&gt;日期类型与标准SQL2003有所不同，在前面“概述”已经描述过，具体如表1：：&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;存储(Bytes)&lt;/td&gt;&lt;td&gt;Min Value &lt;/td&gt;&lt;td&gt;Max Value&lt;/td&gt;&lt;td&gt;Zero Value&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DATETIME&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;&#39;1000-01-01 00:00:00.000000&#39; &lt;/td&gt;&lt;td&gt;&#39;9999-12-31 23:59:59.999999&#39;&lt;/td&gt;&lt;td&gt;&#39;0000-00-00 00:00:00&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DATE&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;&#39;1000-01-01&#39;&lt;/td&gt;&lt;td&gt;&#39;9999-12-31&#39;&lt;/td&gt;&lt;td&gt;&#39;0000-00-00&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;TIME&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;&#39;-838:59:59&#39;&lt;/td&gt;&lt;td&gt;&#39;838:59:59&#39;&lt;/td&gt;&lt;td&gt;&#39;00:00:00&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;TIMESTAMP&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;&#39;1970-01-01 00:00:01.000000&#39;&lt;/td&gt;&lt;td&gt;&#39;2038-01-19 03:14:07.999999&#39;&lt;/td&gt;&lt;td&gt;&#39;0000-00-00 00:00:00&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;YEAR(2)&lt;br /&gt;也是4位数&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1970&lt;/td&gt;&lt;td&gt;2069&lt;/td&gt;&lt;td&gt;0000&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;YEAR(4)&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1901&lt;/td&gt;&lt;td&gt;2155&lt;/td&gt;&lt;td&gt;0000&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;每个时间类型都有一个指定范围的值域，如果不合法则赋给零值（Zero），TIMESTAMP有自动更新的特性；&lt;/p&gt;

&lt;p&gt;如图1：
&lt;img src=&quot;/assets/blog-images/20151118151200.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;datedatetimetimestamp&quot;&gt;DATE、DATETIME、TIMESTAMP：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;DATE只有日期，没有时间；显示格式：”YYYY-MM-DD”；范围见表1；&lt;/li&gt;
  &lt;li&gt;DATETIME既有日期，又有时间；显示格式：’YYYY-MM-DD HH:MM:SS[.fraction]’；范围见表1；可提供自动初始化和更新；&lt;/li&gt;
  &lt;li&gt;TIMESTAMP既有日期，又有时间；显示格式：’YYYY-MM-DD HH:MM:SS[.fraction]’；范围见表1，是UTC（Universal Time Coordinated）标准；可提供自动初始化和更新；存储时由当前时区转换成UTC存储，检索时再转换成当前时区；&lt;/li&gt;
  &lt;li&gt;TIMESTAMP和DATETIME自动初始化和更新（Automatic Initialization and Updating for TIMESTAMP and DATETIME）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体个中区别请看实验吧
如图2：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog-images/20151124101506.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog-images/20151124103838.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog-images/20151124111100.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于数据类型暂时告一段落吧，至于“应用场景”这节等对mysql实际有经验我再补充上去。
这样我就可以继续下面的话题了，ok！&lt;/p&gt;
</content>
    </entry>
 
    <entry>
        <title>git+github+markdown+jekyll blog系列（四）</title>
        <link href="http://F-olivia.github.io/ruby/2015/11/17/jekyll"/>
        <updated>2015-11-17T00:00:00+08:00</updated>
        <id>http://F-olivia.github.io/ruby/2015/11/17/jekyll</id>
        <content type="html">
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/ruby/2015/11/17/jekyll/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先唠叨几句，应该说想放弃这篇文的选写，觉得跟这系列文太遥远，再就是没有什么干料可说；结果遇上一篇文章，我觉得把这个系列做完整了。&lt;/p&gt;

&lt;h5 id=&quot;section&quot;&gt;三、参考&lt;/h5&gt;

&lt;p&gt;（一） 参考blog：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;启蒙文章：阮一峰的文章《&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot;&gt;搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门&lt;/a&gt;》&lt;/li&gt;
  &lt;li&gt;模版blog：&lt;a href=&quot;http://xpmozong.github.io/&quot;&gt;寞踪&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;建议参考&lt;a href=&quot;http://yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/&quot;&gt;Github Pages极简教程 - 雁起平沙的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（二） 来自 Hacker School 的 Mary Rose Cook 最近实现了一个纯 JavaScript 写就的 Git：&lt;a href=&quot;http://gitlet.maryrosecook.com/&quot;&gt;Gitlet&lt;/a&gt;，包括了 Git 核心命令的概念实现。Mary 说，这个项目一是为了了解 Git 内部原理，二是希望写一篇深入浅出解释 Git 核心概念的短文:&lt;a href=&quot;http://maryrosecook.com/blog/post/git-in-six-hundred-words&quot;&gt;Git in 600 words&lt;/a&gt;。短文很有趣，思路清晰也足够深入，值得一看。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;git init：设想你现在位于alpha/目录下，这里有一个文本文件number.txt，里面的内容只有一个词：“first”。现在执行git init将这个 alpha 文件夹初始化为 Git 仓库。&lt;/li&gt;
  &lt;li&gt;git add：执行git add number.txt会将number.txt添加到 Git 的索引（index）中。这个索引记录了所有 Git 保持追踪的文件，现在它有了一个映射记录number.txt -&amp;gt; first，同时add命令还会把一个包含了first字符串的二进制对象加入 Git 的对象数据库里。&lt;/li&gt;
  &lt;li&gt;git commit：现在执行git commit -m first。这条命令会做三件事情。首先在对象数据库内创建一个树对象，用以记录alpha目录下的文件列表，这个对象有一个指针指向前面git add命令创建的first二进制对象；第二，这条命令还会创建一个 commit 对象用以代表刚刚提交的版本，它包含一个指针指向刚刚的树对象；第三，master 分支也会指向这个新创建的 commit 对象。&lt;/li&gt;
  &lt;li&gt;git clone：现在执行git clone . ../beta。它会创建一个新目录 beta 并将其初始化为 Git 仓库，然后把 alpha 仓库的对象数据库中所有对象拷贝给 beta 的对象数据库，将 beta 的 master 分支像 alpha 的 master 一样指向相应的对象。它还根据first提交的内容配置索引，并根据索引更新目录下的文件——也就是number.txt。&lt;/li&gt;
  &lt;li&gt;现在切换到 beta 目录，修改number.txt的内容为“second”，执行git add number.txt和git commit -m second，新创建的提交对象 second（译注：姑且称之为 second）会有一个指向父提交（first）的指针，表示 second 继承自 first，而 master 分支则指向 second 提交。&lt;/li&gt;
  &lt;li&gt;git remote：回到 alpha 目录，执行git remote add beta ../beta，将 beta 仓库设为远程仓库。&lt;/li&gt;
  &lt;li&gt;git pull：执行git pull beta master；在这条命令背后，它其实会执行git fetch beta master，从 beta 仓库中找到 second 提交的相关对象拷贝到 alpha 仓库；把 alpha 中关于 beta 的 master 分支记录指向这个 second 提交；更新FETCH_HEAD指向刚刚从 beta 仓库拉取的 master 分支，还是这个 second 提交。&lt;br /&gt; 此外，pull命令还会执行git merge FETCH_HEAD。从FETCH_HEAD得知最近拉取的分支是 beta 仓库的 master 分支，据此拿到相应的对象，也就是 second 提交对象。此时 alpha 的 master 分支指着 first 提交，正好是 second 的祖先提交，于是对于 merge 命令来说只需要将 master 分支指向 second 提交即可。接下来merge命令还会更新索引以匹配 second 提交的内容，并且相应更新工作目录中的文件。&lt;/li&gt;
  &lt;li&gt;git branch red：现在执行git branch red，创建一个名为“red”、指向 second 提交的新分支。&lt;/li&gt;
  &lt;li&gt;git checkout red：然后执行git checkout red。在 checkout 之前，HEAD指向 master 分支，执行命令之后它就指向了 red 分支，使得 red 成为当前分支。&lt;/li&gt;
  &lt;li&gt;重复2、3步骤：接下来把number.txt的内容修改为 “third”，执行git add numbers.txt和run git commit -m third。&lt;/li&gt;
  &lt;li&gt;git push：之后再执行git push beta red，这条命令会把 alpha 仓库内跟 third 提交相关的对象拷贝至 beta 仓库，并且将（alpha 仓库内记录的）beta 仓库 red 分支指向 third 提交。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体引用了&lt;a href=&quot;http://gitlet.maryrosecook.com/&quot;&gt;gitlet的代码&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	---
	$ npm install -g gitlet

	$ mkdir a
	$ cd a
	./a $ gitlet init
	
	./a $ echo first &amp;gt; number.txt
	./a $ gitlet add number.txt
	./a $ gitlet commit -m &quot;first&quot;
		[master 2912d7a2] first
	
	./a $ cd ..
		$ gitlet clone a b
	
		$ cd b
	./b $ echo second &amp;gt; number.txt
	./b $ gitlet add number.txt
	./b $ gitlet commit -m &quot;second&quot;
	      [master 484de172] second
	
		$ cd ../a
	./a $ gitlet remote add b ../b
	./a $ gitlet fetch b master
		From ../b
		Count 6
		master -&amp;gt; b/master
	./a $ gitlet merge FETCH_HEAD
		Fast-forward
	
	./a $ gitlet branch other
	./a $ gitlet checkout other
		Switched to branch other
	
	./a $ echo third &amp;gt; number.txt
	./a $ gitlet add number.txt
	./a $ gitlet commit -m &quot;third&quot;
		[other 656b332d] third
	
	./a $ gitlet push b other
		To ../b
		Count 9
		other -&amp;gt; other
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好了，这个系列就到这里。谢谢几位的带领！&lt;/p&gt;
</content>
    </entry>
 
    <entry>
        <title>mysql学习系列（三）</title>
        <link href="http://F-olivia.github.io/database/2015/10/29/mysql"/>
        <updated>2015-10-29T00:00:00+08:00</updated>
        <id>http://F-olivia.github.io/database/2015/10/29/mysql</id>
        <content type="html">
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/database/2015/09/26/mysql/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;三、数值类型&lt;/h5&gt;

&lt;p&gt;支持标准SQL2003所有数值类型，在前面“概述”已经描述过，具体：&lt;/p&gt;

&lt;p&gt;1  整型（interger data）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TINYINT&lt;/li&gt;
  &lt;li&gt;SMALLINT&lt;/li&gt;
  &lt;li&gt;MEDIUMINT&lt;/li&gt;
  &lt;li&gt;INT&lt;/li&gt;
  &lt;li&gt;BIGINT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;表1：&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;存储(Bytes)&lt;/td&gt;&lt;td&gt;Min Value &lt;br /&gt; (Signed/Unsigned)&lt;/td&gt;&lt;td&gt;Max Value &lt;br /&gt; (Signed/Unsigned)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;TINYINT&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;-128&lt;/td&gt;&lt;td&gt;127&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;255&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SMALLINT&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;-32768&lt;/td&gt;&lt;td&gt;32767&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;65535&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MEDIUMINT&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;-8388608&lt;/td&gt;&lt;td&gt;8388607&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;16777215&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;INT&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;-2147483648&lt;/td&gt;&lt;td&gt;2147483647&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;4294967295&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BIGINT&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;-9223372036854775808&lt;/td&gt;&lt;td&gt;9223372036854775807&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;18446744073709551615&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;2  固定宽度（a fixed-point）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DECIMAL&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NUMERIC&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]
  M:代表保存数据的长度，最大为65；默认为10
  D:代表小数点部分的位数，最大为30
  存储为二进制存储，每9个数字需要4个字节；举例decimal(12,2),整数部分：4+[(12-2)-9]/2=5，小数部分：2/2=1,共计6字节。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如图1：
&lt;img src=&quot;/assets/blog-images/20151009163109.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3  BIT型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	BIT[(M)]
	M:代表存储长度，1~64bits
	存储是二进制位，存储换算：INT((n+7)/8),比如bit(1),为1个字节。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体操作请看
如图2：
&lt;img src=&quot;/assets/blog-images/20151009170200.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4  浮点型（floating-point）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;FLOAT：单精度浮点型&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]
  M:代表保存数据的长度，0~23bytes
  D:代表小数点部分的位数，
  存储为4个字节，如果长度&amp;gt;24，自动转换为DOUBLE。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DOUBLE：双精度浮点型&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]
  M:代表保存数据的长度，24~53bytes
  D:代表小数点部分的位数，
  存储为8个字节，
  real类型是同义词。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体操作请看
如图3：
&lt;img src=&quot;/assets/blog-images/20151009172422.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5  数据类型属性&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NOT NULL：不允许为空&lt;/li&gt;
  &lt;li&gt;NULL：允许为空&lt;/li&gt;
  &lt;li&gt;DEFAULT：默认值&lt;/li&gt;
  &lt;li&gt;AUTO_INCREMENT：自增长类型，只有整型为自增长类型&lt;/li&gt;
  &lt;li&gt;UNSIGNED：无符号&lt;/li&gt;
  &lt;li&gt;ZEROFILL：填充零&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体操作请看
如图4：
&lt;img src=&quot;/assets/blog-images/20151029100642.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
</content>
    </entry>
 
    <entry>
        <title>mysql学习系列（二）</title>
        <link href="http://F-olivia.github.io/database/2015/09/22/mysql"/>
        <updated>2015-09-22T00:00:00+08:00</updated>
        <id>http://F-olivia.github.io/database/2015/09/22/mysql</id>
        <content type="html">
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/database/2015/09/22/mysql/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;二、字符串类型&lt;/h5&gt;

&lt;p&gt;1 固定长度（Fixed-width）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CHARACTER(length)&lt;/li&gt;
  &lt;li&gt;CHAR(length)：是CHARACTER的简写，其中MYSQL还可以这么定义：NATIONAL CHAR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2 可变长度（Variable-length）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VARCHAR(length)&lt;/li&gt;
  &lt;li&gt;NATIONAL VARCHAR（length）&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;sqlmode&quot;&gt;区别：跟字符集和系统参数sql_mode都有关系&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;1）长度，char：0~255；varchar：0-65535(255*255)
2）存储（Stored），
3）检索（retrieved）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表1：&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;td&gt;值&lt;/td&gt;&lt;td&gt;CHAR(4)&lt;/td&gt;&lt;td&gt;检索&lt;/td&gt;&lt;td&gt;存储&lt;/td&gt;&lt;td&gt;VARCHAR(4)&lt;/td&gt;&lt;td&gt;存储&lt;/td&gt;&lt;td&gt;检索&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&#39;&#39;&lt;/td&gt;&lt;td&gt;&#39;    &#39;&lt;/td&gt;&lt;td&gt;&#39;&#39;&lt;/td&gt;&lt;td&gt;4bytes&lt;/td&gt;&lt;td&gt;&#39;&#39;&lt;/td&gt;&lt;td&gt;1bytes&lt;/td&gt;&lt;td&gt;&#39;&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&#39;ab&#39;&lt;/td&gt;&lt;td&gt;&#39;ab  &#39;&lt;/td&gt;&lt;td&gt;&#39;ab&#39;&lt;/td&gt;&lt;td&gt;4bytes&lt;/td&gt;&lt;td&gt;&#39;ab&#39;&lt;/td&gt;&lt;td&gt;3bytes&lt;/td&gt;&lt;td&gt;&#39;ab&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&#39;ab &#39;&lt;/td&gt;&lt;td&gt;&#39;ab  &#39;&lt;/td&gt;&lt;td&gt;&#39;ab&#39;&lt;/td&gt;&lt;td&gt;4bytes&lt;/td&gt;&lt;td&gt;&#39;ab &#39;&lt;/td&gt;&lt;td&gt;3bytes&lt;/td&gt;&lt;td&gt;&#39;ab &#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;4bytes&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;5bytes&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&#39;abcdefgh&#39;&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;4bytes&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;td&gt;5bytes&lt;/td&gt;&lt;td&gt;&#39;abcd&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;从表1中得出以下结论：
表2：&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;CHAR(M)&lt;/td&gt;&lt;td&gt;VARCHAR(M)&lt;/td&gt;&lt;td&gt;备注&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;长度&lt;/td&gt;&lt;td&gt;固定长度&lt;/td&gt;&lt;td&gt;根据字符集自动换算长度，&lt;br /&gt;
该表当中所有之和&amp;lt;65535&lt;/td&gt;&lt;td&gt;跟字符集有关&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;存储&lt;/td&gt;&lt;td&gt;固定长度，不足补空格；&lt;br /&gt;超长的话，
根据sql_mode&lt;br /&gt;进行报错，或自动截断&lt;/td&gt;&lt;td&gt;空字符，需要一个字节；&lt;br /&gt;
如果&amp;lt;255个字节，会增加一个&lt;br /&gt;字节，记录长度；&lt;br /&gt;如果&amp;gt;255个字节,会增加两个字节&lt;/td&gt;&lt;td&gt;跟sql_mode有关&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;检索&lt;/td&gt;&lt;td&gt;取出来的值，会截取多余空格；&lt;br /&gt;跟sql_mode有关&lt;/td&gt;&lt;td&gt;跟存储的内容一致&lt;/td&gt;&lt;td&gt;跟sql_mode有关&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;具体请看实例：
如图1：
&lt;img src=&quot;/assets/blog-images/20150922163551.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-1&quot;&gt;有关知识点：&lt;/h5&gt;
&lt;p&gt;a、字符集，这个概念比较大，为了不影响本章主题，这里就不过多介绍，有时间会单独抽出一章来着重介绍&lt;/p&gt;

&lt;p&gt;b、sql_mode：表示SQL运行在何种模式，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;查看：show variables like ‘sql_mode’; 或者 SELECT @@GLOBAL.sql_mode;SELECT @@SESSION.sql_mode;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设置：SET GLOBAL sql_mode = ‘modes’;SET SESSION sql_mode = ‘modes’;
或者在配置文件my.cnf(unix)/my.ini(windows),写入sql_mode=”modes”;如果多个用”,”隔开&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;几类常见的模式：STRICT_TRANS_TABLES、STRICT_ALL_TABLES、PAD_CHAR_TO_FULL_LENGTH等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参考：refman-5.6-en.a4，Section 5.1.7, “Server SQL Modes”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于sql_mode具体操作如下：
如图2：
&lt;img src=&quot;/assets/blog-images/20150922164809.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c、常用命令：&lt;/p&gt;

&lt;p&gt;查看表结构:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;desc(describe) table_name;
explain table_name;
show columns from table_name;
show create table table_name;(这个可以查看表的定义)

举例：创建表t_desc

mysql&amp;gt; create table t_desc(
-&amp;gt; col1 char(6) not null default &#39;&#39;,
-&amp;gt; col2 character(6),
-&amp;gt; col3 varchar(6),
-&amp;gt; col4 national varchar(6));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体操作请看，
如图3：
&lt;br /&gt;
&lt;img src=&quot;/assets/blog-images/20150922095133.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;d、问题：根据mysql参考文档中，varchar(4)，如果实际存储‘abcd’，存储长度是5，怎么查看？&lt;/p&gt;

&lt;p&gt;3 二进制（BINARY）和可变长度二进制（VARBINARY）&lt;/p&gt;

&lt;h5 id=&quot;sqlmode-1&quot;&gt;区别：跟系统参数sql_mode都有关；与字符集无关&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;1）长度，BINARY：0~255；VARBINARY：0-65535
2）存储：单个字节存储的，所以跟字符集无关
3）如果，sql_mode指定为空，超过指定长度存储，会报警告，且自动截断；如果指定为STRICT_TRANS_TABLE，则会报错
4）如果，存储值长度不够，用0字节（0x00）补全；
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体请看，
如图4：
&lt;br /&gt;
&lt;img src=&quot;/assets/blog-images/20150923164823.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4 二进制大对象（BLOB）和文本大对象（text）&lt;/p&gt;

&lt;p&gt;该数据类型没有太多介绍，只是存储备注等需要更长描述性字段，涉及2个参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;max_sort_length：进行排序和分组有意义的字节长度&lt;/li&gt;
  &lt;li&gt;max_allowed_packet：客户端与服务器端通讯缓存包大小&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-2&quot;&gt;区别：列出二进制字符和非二进制字符&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;非二进制字符串
&amp;gt; char(0-255)&lt;br /&gt;
&amp;gt; varchar(0-65535)&lt;br /&gt;
&amp;gt; text(0-65535)&lt;br /&gt;
&amp;gt; TINYTEXT(0-255)&lt;br /&gt;
&amp;gt; MEDIUMTEXT(0-16777215)&lt;br /&gt;
&amp;gt; LONGTEXT(0-4294967295)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;二进制字符串
&amp;gt; BINARY(0-255)&lt;br /&gt;
&amp;gt; VARBINARY(0-65535)&lt;br /&gt;
&amp;gt; TINYBLOB(0-255)&lt;br /&gt;
&amp;gt; BLOB(0-65535)&lt;br /&gt;
&amp;gt; MEDIUMBLOB(0-16777215)&lt;br /&gt;
&amp;gt; LONGBLOB(0-4294967295)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5 枚举型（ENUM）和SET字符串对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）长度：ENUM（0-65535）；SET（64个不同成员）
2）ENUM只能有一个，空串或者为null；SET可以多个值
3）ENUM索引值为自然值，0表示这是非法值；SET索引值为该实际值的二进制编码
4）存储NUMBER类型，也是用引号引起来
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体请看实验吧：
如图5：
&lt;br /&gt;
&lt;img src=&quot;/assets/blog-images/20150924162913.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/blog-images/20150924164031.png&quot; alt=&quot;Alt text&quot; /&gt;	&lt;/p&gt;
</content>
    </entry>
 
    <entry>
        <title>mysql学习系列（一）</title>
        <link href="http://F-olivia.github.io/database/2015/09/18/mysql"/>
        <updated>2015-09-18T00:00:00+08:00</updated>
        <id>http://F-olivia.github.io/database/2015/09/18/mysql</id>
        <content type="html">
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/database/2015/09/18/mysql/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;目录：&lt;/h3&gt;
&lt;p&gt;本次学习依据mysql版本：Server version: 5.6.23-log MySQL Community Server (GPL)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;概述&lt;/li&gt;
&lt;li&gt;字符串类型&lt;/li&gt;
&lt;li&gt;数值类型&lt;/li&gt;
&lt;li&gt;日期和时间类型&lt;/li&gt;
&lt;li&gt;应用场景&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;section-1&quot;&gt;一、概述&lt;/h5&gt;
&lt;p&gt;如目录中所列，字符串（string type）、数值（numeric type）、日期与时间（date and time type）&lt;/p&gt;

&lt;p&gt;1 字符串（string type）：依据标准SQL（92，99，2003等）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) 固定长度（Fixed-width）
* CHARACTER(length)
* CHAR(length)

2) 可变长度（Variable-length）
* CHARACTER VARYING(length)
* CHAR VARYING(length)
* VARCHAR(length)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但，SQL2003中有关大数据对象类型，mysql中是没有的，如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* CHARACTER LARGE OBJECT
* CHAR LARGE OBJECT
* CLOB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，mysql支持以下类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3）二进制（BINARY）和可变长度二进制（VARBINARY）
4）二进制大对象（BLOB）和文本大对象（text）
5）枚举型（ENUM）
6）SET字符串对象
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 数值（numeric type）：支持标准SQL2003所有数值类型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) 整型（interger data）
* TINYINT
* SMALLINT
* MEDIUMINT
* INT
* BIGINT

2）浮点型（floating-point）
* FLOAT
* DOUBLE

3）固定宽度（a fixed-point）
* DECIMAL
* NUMERIC

4）BIT型
* BIT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SQL2003的数值类型有以下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）精确数值类型（Exact numeric）
* NUMERIC(g,f)
* DECIMAL(g,f) -(DEC)
* SMALLINT
* INTEGER(INT)
* BIGINT

2）近似值类型（Approximate numeric）
* FLOAT(p)
* REAL
* DOUBLE PRECISION

3）扩充了一些
* TINYINT
* MEDIUMINT
* BIT(x)
* SERIAL
	&amp;gt;&amp;gt;(BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE KEY)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 日期与时间（date and time type）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）DATETIME
2）DATE
3）TIME
4）YEAR
5）TIMESTAMP
6）Zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与SQL2003标准有所不同&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）DATE
2）TIME(p)，其中p代表精度
3）TIMESRAMP(p)，--[WITH|WITHOUT] TIME ZONE可以带时区
&lt;/code&gt;&lt;/pre&gt;

</content>
    </entry>
 
    <entry>
        <title>git+github+markdown+jekyll blog系列（三）</title>
        <link href="http://F-olivia.github.io/ruby/2015/04/10/jekyll"/>
        <updated>2015-04-10T00:00:00+08:00</updated>
        <id>http://F-olivia.github.io/ruby/2015/04/10/jekyll</id>
        <content type="html">
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/ruby/2015/04/10/jekyll/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;三、实现&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://f-olivia.github.io/ruby/2015/03/31/jekyll/&quot;&gt;系列(一)&lt;/a&gt;学习完阮一峰同学的文章后，你就已经有能力搭建自己的独立博客了，但是这个博客 只有最基本的功能，并且也不好看。想想，有几种方式打造自己的blog：&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;完全自己定制博客&lt;/li&gt;
    &lt;li&gt;找一份框架，修改后使用&lt;/li&gt;
    &lt;li&gt;从GitHub上fork别人的博客代码，在其中添加自己的文章&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;遵从简单原则，我选择第三种方式，fork了&lt;a href=&quot;http://xpmozong.github.io/&quot;&gt;寞踪&lt;/a&gt;，做了简单的修改，然后发表自己的文章。
好，开工吧。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用GitHub Pages建立博客；阮一峰是通过本地创建自己blog，然后推送到github。我呢，利用github Pages自动生成一个blog，然后clone到本地。具体怎么做呢？还是建议参考&lt;a href=&quot;http://yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/&quot;&gt;Github Pages极简教程 - 雁起平沙的网络日志&lt;/a&gt;；这里就罗列一下步骤：&lt;/p&gt;

    &lt;p&gt;1）、创建代码库：登录github，选择New repository，输入项目名称xxxx.github.io&lt;/p&gt;

    &lt;p&gt;2）、点击按钮create repository&lt;/p&gt;

    &lt;p&gt;3）、点击按钮admin，选择按钮Automatic page generator，生成静态网页&lt;/p&gt;

    &lt;p&gt;ok，你所创建的xxxx.github.io的blog已经生成&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;clone上面所创建的库，命令：git clone git@github.com:F-olivia/F-olivia.git 或者 git clone https://github.com/F-olivia/F-olivia.github.io.git；&lt;/p&gt;

    &lt;p&gt;在开始菜单里找到RailsInstaller –&amp;gt; Git Bash，执行上面的命令，
 然后就在本地目录，C:\Sites\F-olivia.github.io生成一个文件夹F-olivia.github.io，保留文件夹.git&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;clone别人的库，git clone https://github.com/xpmozong/xpmozong.github.io.git；删除其目录下文件夹.git&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;简单修改：主要是针对文件夹xpmozong.github.io内容进行调整，&lt;/p&gt;

    &lt;p&gt;1）、删除文件夹.site&lt;/p&gt;

    &lt;p&gt;2）、清空文件夹.post下的所有文件&lt;/p&gt;

    &lt;p&gt;3）、全文搜索一下关键字xpmozong，用自己的库名替换&lt;/p&gt;

    &lt;p&gt;ok，感觉做贼一样，偷了别人的劳动成果。那没办法谁让我web方面一窍不通，还不想太多浪费时间。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;拷贝xpmozong.github.io下所有内容，复制到自己库目录下&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用markdownpad2 创建一个文件2015-03-28-markdonnote.md，内容：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 layout: default
 title: 你好，世界
 category: 日志
 comments: true
	
 ---
	
 &amp;lt;h2&amp;gt;git+github+markdown+jekyll blog系列（三）&amp;lt;/h2&amp;gt;
	
 &amp;lt;p&amp;gt;我的第一篇文章&amp;lt;/p&amp;gt;
	
 &amp;lt;p&amp;gt;10 Apr 2015&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;发布自己的库，命令：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; jekyll build    #编译生成静态网页
 git init    #--初始化本地库
 git add -A    #--添加本地库新增文件
 git commit -m &quot;first commit&quot;    #--提交
 git push -u origin master    #--推送到github远程库
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;介绍一下jekyll的结构，&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ```
 .
 ├── index.html
 ├── _config.yml
 ├── assets
 │   ├── blog-images
 │   ├── css
 │   ├── fonts
 │   ├── images
 │   └── javascripts
 ├── _includes
 ├── _layouts
 ├── _plugins
 ├── _posts
 └── _site
 ```
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;_config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是针对 Jekyll 的&lt;a href=&quot;http://jekyllrb.com/docs/configuration/&quot;&gt;配置文件&lt;/a&gt;，
决定了 Jekyll 如何解析网站的源代码,下面是一个示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	```
	baseurl: /StrayBirds
	markdown: redcarpet
	safe: false
	pygments: true
	excerpt_separator: &quot;\n\n\n&quot;
	paginate: 5
	```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我的网站建立在 &lt;code&gt;StrayBirds&lt;/code&gt; 项目中，所以 &lt;code&gt;baseurl&lt;/code&gt; 设置成 &lt;code&gt;StrayBirds&lt;/code&gt;，
我的文章采用 Markdown 格式写成，可以指定 Markdown 的解析器 &lt;code&gt;redcarpet&lt;/code&gt;。
另外，安全模式需要关闭，以便 Jekyll 解析时会运行插件。
&lt;code&gt;pygments&lt;/code&gt; 可以使得Jekyll解析文章中源代码时加入特殊标记，例如指定代码类型，
这可以被很多 javascript 代码高度库使用。
&lt;code&gt;excerpt_separator&lt;/code&gt; 指定了一个摘要分割符号，这样 Jekyll 可以在解析文章时，
将文章的提要提取出来。
paginate 指定了一页有几篇文章，页数太多时，我们可以将文章列表分页，我们在
后文还会提到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;_layouts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个目录存放着一些网页模板文件，为网站所有网页提供一个基本模板，这样
每个网页只需要关心自己的内容就好，其它的都由模板决定。例如，这个目录下的
default.html 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	```html
	
	&amp;lt;!DOCTYPE html&amp;gt;
	&amp;lt;html&amp;gt;
	  &amp;lt;head&amp;gt;
	    &amp;lt;meta charset=&#39;utf-8&#39;&amp;gt;
	    &amp;lt;title&amp;gt;{{ page.title }}&amp;lt;/title&amp;gt;
	  &amp;lt;/head&amp;gt;
	  &amp;lt;body&amp;gt;
	    &amp;lt;header&amp;gt;
	    &amp;lt;/header&amp;gt;
	
	    &amp;lt;aside&amp;gt;
	    &amp;lt;/aside&amp;gt;
	
	    &amp;lt;article&amp;gt;
	{{ content }}
	    &amp;lt;/article&amp;gt;
	
	    &amp;lt;footer&amp;gt;
	    &amp;lt;/footer&amp;gt;
	  &amp;lt;/body&amp;gt;
	&amp;lt;/html&amp;gt;
	
	
	```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出，这个文件就是所有页面共有的东西，每个页面的具体内容会被填充在
`` 中，注意这个 content 两边的标记，这是一种叫 
&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;liquid&lt;/a&gt; 的标记语言。
另外，还有那个 &lt;code&gt;git+github+markdown+jekyll blog系列（三）&lt;/code&gt; ，其中 &lt;code&gt;page&lt;/code&gt; 表示引用 &lt;code&gt;default.html&lt;/code&gt;的
那个页面，这个页面的 &lt;code&gt;title&lt;/code&gt; 值会在 &lt;code&gt;page&lt;/code&gt; 相应页面中被设置，例如
下面的 &lt;code&gt;index.html&lt;/code&gt; 文件，开头部分就设置了 &lt;code&gt;title&lt;/code&gt; 值。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;index.html &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是网站的首页，访问 &lt;code&gt;http://username.github.io&lt;/code&gt; 时，会指向 
&lt;code&gt;http://username.github.io/index.html&lt;/code&gt;，我们看一下基本内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	```html
		---
		layout: default
		title: 首页
		---
	
	
	&amp;lt;ul class=&quot;post-list&quot;&amp;gt;
	    {% for post in site.posts %}
	        &amp;lt;a href=&quot;{{site.baseurl}}{{post.url}}&quot;&amp;gt; {{ post.title }}  &amp;lt;/a&amp;gt; &amp;lt;br&amp;gt;
	        {{ post.date | date: &quot;%F&quot; }} &amp;lt;br&amp;gt;
	        {{ post.category }} &amp;lt;br&amp;gt;
	        {{ post.excerpt }} 
	    {% endfor %}
	
	&amp;lt;/ul&amp;gt;
	```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，文件开头的描述，我们称之为 &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;front-matter&lt;/a&gt;，
是对当前文件的一种描述，这里
设置的变量可以在解析时被引用，例如这里的 &lt;code&gt;layout&lt;/code&gt;就会告诉 Jekyll, 生成 &lt;code&gt;index.html&lt;/code&gt;
文件时，去 &lt;code&gt;_layouts&lt;/code&gt; 目录下找 &lt;code&gt;default.html&lt;/code&gt; 文件，然后把当前文件解析后，添加到
&lt;code&gt;default.html&lt;/code&gt; 的 &lt;code&gt;content&lt;/code&gt; 部分，组成最终的 &lt;code&gt;index.html&lt;/code&gt; 文件。还有&lt;code&gt;title&lt;/code&gt; 设置好的
值，会在 &lt;code&gt;default.html&lt;/code&gt; 中通过 &lt;code&gt;page.title&lt;/code&gt; 被引用。&lt;/p&gt;

&lt;p&gt;文件的主体部分遍历了站点的所有文章，并将他们显示出来，这些语法都是 &lt;code&gt;liquid&lt;/code&gt; 语法，
其中的变量，例如 &lt;code&gt;site&lt;/code&gt;, 由 Jekyll 设置我们只需要引用就可以了。而 &lt;code&gt;post&lt;/code&gt; 中的变量，
如 &lt;code&gt;post.title&lt;/code&gt;, &lt;code&gt;post.category&lt;/code&gt; 是由 &lt;code&gt;post&lt;/code&gt; 文件中的 front-matter 决定，后面马上就会看到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;_posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个目录存放我们的所有博客文章，他们的名字有统一的格式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	```
	YEAR-MONTH-DAY-title.MARKUP
	```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如，2014-02-15-github-jeklly.md，这个文件名会被解析，前面的 &lt;code&gt;index.html&lt;/code&gt; 中，
&lt;code&gt;post.date&lt;/code&gt; 的值就由这里文件名中的日期而来。下面，我们看看一篇文章的内容示例：&lt;/p&gt;

&lt;p&gt;ok，今天就到这儿吧，还有个尾巴，明天接着来&lt;/p&gt;
</content>
    </entry>
 
    <entry>
        <title>git+github+markdown+jekyll blog系列（二）</title>
        <link href="http://F-olivia.github.io/ruby/2015/04/09/jekyll"/>
        <updated>2015-04-09T00:00:00+08:00</updated>
        <id>http://F-olivia.github.io/ruby/2015/04/09/jekyll</id>
        <content type="html">
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/ruby/2015/04/09/jekyll/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;三、准备工作&lt;/h5&gt;

&lt;p&gt;（一） 工具介绍：git、github、jekyll、markdown&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt;：是一个开源的分布式版本控制系统，非常高效的项目版本管理工具。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;：是一个基于Git的非常流行的开源项目托管库。 利用GitHub，可以让全球各地的程序员们一起协作开发。GitHub提供了一种功能，叫GitHub Pages，利用这个功能，我们可以为项目建立网站，当然，这也意味着我们可以通过GitHub Pages 建立自己的网站。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;：是一个简单的，针对博客设计的静态网站生成器。使用GitHub和Jekyll，我们可以打造自己的独立博客，你可以自由地定制网站的风格，且是免费的。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;markdown&lt;/a&gt;： 是一种适用于网络的书写语言。严格的说它就是一种标记语言。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（二） 环境配置：我的工作环境是win7系统，因此遵从简单原则，我选择 &lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;RailsInstaller&lt;/a&gt;来搭建ruby环境（包含Ruby、Rails、Bundler、Git、Sqlite、TinyTDS、SQL Server support和DevKit。），然后来配置git和github；进而安装jekyll。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装ruby，上面已经说过了，推介用RailsInstaller（我下载的是railsinstaller-3.1.0.exe），具体步骤：（&lt;a href=&quot;http://www.cnblogs.com/tambor/archive/2011/12/25/rails_anzhuang_railsinstaller.html&quot;&gt;请参考&lt;/a&gt;）&lt;/p&gt;

    &lt;p&gt;1）、注册git用户，请登录 &lt;a href=&quot;https://github.com/join&quot;&gt;github&lt;/a&gt;，如图1：
 &lt;img src=&quot;/assets/blog-images/20150410125928.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;2）、安装步骤就不在这里说了，一路next下去。&lt;/p&gt;

    &lt;p&gt;3）、安装完会自动弹出git和shh的设置提示，哦，在做这个之前先要注册一个git用户，所以，就有了1）步骤&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 # Rails Environment Configuration.

 Your git configuration is incomplete.
 user.name and user.email are required for properly using git and services such
 as GitHub (https://github.com/).
	
  Please enter your name, for example mine is: Wayne E. Seguin
 name &amp;gt; F-olivia
 Setting user.name to F-olivia
	
  Please enter your email address, for example mine is: wayneeseguin@gmail.com
 email &amp;gt; xxxx@163.com
 Setting user.email to xxxx@163.com
 DL is deprecated, please use Fiddle
	
 git:
     user.name:  F-olivia
     user.email: xxxx@163.com
     version:    git version 1.9.4.msysgit.2

 ruby:
     bin:        D:/RailsInstaller/Ruby2.0.0/bin/ruby.exe
     version:    ruby 2.1.5p273 (2014-11-13 revision 48405) [i386-mingw32]

 rails:
     bin:        D:/RailsInstaller/Ruby2.0.0/bin/rails.bat
     version:    Rails 4.1.8
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;4）、填写github注册时的用户名和邮箱，就完成了公钥和密钥的生成，在C:\Documents and Settings\用户名下(C:\Users\xieax.ssh)，有个隐藏目录名为.ssh，id_rsa.pub文件就是公钥，id_rsa就是密钥。&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 ssh:
 public_key_location: C:\Users\xieax/.ssh/id_rsa.pub
 public_key_contents: ssh-rsa AAAAB3NzaC1yc2E........
 .............lGB3Nz F-olivia &amp;lt;xxxx@163.com&amp;gt;


 NOTES:
  		
 Your public ssh key (id_rsa.pub) has been automatically generated and copied to your clipboard.
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;5）、ssh密钥与github账户做关联，把4）步骤中文件id_rsa.pub复制，然后登录github找到“Account Settings” &amp;gt; Click “SSH Keys” &amp;gt; Click “Add SSH key”，把密钥串粘贴，如图1：
 &lt;img src=&quot;/assets/blog-images/20150410134022.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;6）、验证git连接，在开始菜单里找到RailsInstaller –&amp;gt; Git Bash，执行它，就打开了下面的命令窗口，以后的操作都是在这个窗口下进行的；输入命令：ssh -T git@github.com&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 $ ssh -T git@github.com
 1.The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.
 2.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
 3.Are you sure you want to continue connecting (yes/no)?
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;选择yes&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; Hi F-olivia! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;后续设置账户信息，看个人意愿了，我没有做这一步&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 1. git config --global user.name &quot;你的名字&quot;
 2. git config --global user.email &quot;your_email@youremail.com&quot;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;好了，git与github连接成功了，革命的道路走了一半了，继续加油！	&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装jekyll，这个比较繁琐，要安装一堆包（directory_watcher、liquid、open4、maruku和classifier，由于jekyll默认包是maruku来解析markdown，这里用kramdown），具体如下：&lt;/p&gt;

    &lt;p&gt;科普一下，Ruby是一种脚本语言，Gem是基于Ruby的一些开发工具包，Rails也算是一组Gem，专门用来做网站的。 而目前最好gem包是淘宝的。&lt;/p&gt;

    &lt;p&gt;1）、查看gem包，命令：gem soruces -l&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 C:\Sites&amp;gt;gem soruces -l
 ERROR:  While executing gem ... (Gem::CommandLineError)
 		Unknown command soruces
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;2）、更换成淘宝包&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---	
 C:\Sites&amp;gt;gem sources -a http://ruby.taobao.org/
 http://ruby.taobao.org/ added to sources
	
 C:\Sites&amp;gt;gem sources -l
 *** CURRENT SOURCES ***
	
 http://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;3）、安装jekyll，命令：gem install jekyll&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; ---
 C:\Sites&amp;gt;gem install jekyll
 Fetching: liquid-2.6.1.gem (100%)
 Successfully installed liquid-2.6.1
 Fetching: kramdown-1.5.0.gem (100%)
 Successfully installed kramdown-1.5.0
 ......
 Installing ri documentation for yajl-ruby-1.1.0-x86-mingw32
 Done installing documentation for blankslate, celluloid, classifier-reborn, colorator, fast-stemmer, ffi, hitimes, jekyll, jekyll-coffeescript, jekyll-gist, jekyll-paginate, jekyll-sass-converter, jekyll-watch, kramdown, liquid, listen, mercenary, parslet, posix-spawn, pygments.rb, rb-fsevent, rb-in
 otify, redcarpet, safe_yaml, timers, toml, yajl-ruby after 9 seconds
 27 gems installed
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;根据安装成功列表，可以和上面需要的包对照一下，如需安装的，用命令gem install 包名执行。&lt;/p&gt;

    &lt;p&gt;ok，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;markdown安装，windows下只能用MarkdownPad，这个更简单了，百度一个，一路next下去。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;好了，今天就到这里，明天继续，开始创建自己的blog。&lt;/p&gt;
</content>
    </entry>
 
    <entry>
        <title>git+github+markdown+jekyll blog系列（一）</title>
        <link href="http://F-olivia.github.io/ruby/2015/03/31/jekyll"/>
        <updated>2015-03-31T00:00:00+08:00</updated>
        <id>http://F-olivia.github.io/ruby/2015/03/31/jekyll</id>
        <content type="html">
&lt;ul&gt;
    &lt;li&gt;作者：&lt;a href=&quot;http://weibo.com/Polivia&quot; target=&quot;blank&quot;&gt;tomfans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;本文地址：http://f-olivia.github.io/ruby/2015/03/31/jekyll/&lt;/li&gt;
    &lt;li&gt;转载请注明出处&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;目录：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;起因&lt;/li&gt;
&lt;li&gt;目标&lt;/li&gt;
&lt;li&gt;准备工作&lt;/li&gt;
&lt;li&gt;实现&lt;/li&gt;
&lt;li&gt;参考&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;section-1&quot;&gt;一、起因&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;缘起2012年看了一篇关于如何写简历的文章，介绍了Markdown文本编辑，还讲了&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; 上建立自己的技术blog，给自己加分项目；这时我才知道git以及github是什么东东，markdown又是啥东西？但我没有太多的关注这些东西。&lt;/li&gt;
  &lt;li&gt;2013年开始学习nosql的知识，发现很多关于git以及github的东西，这引起了我极大的好奇，怎么这些东西无处不在，原来他是开源的&lt;/li&gt;
  &lt;li&gt;这种冲动与日俱增，2013-1-24我给自己申请了github账号，准备着手建立自己blog，这样不用在qq上偶尔写写画画了。但是，对一个跟开源基本上不沾边的it民工，又不做互联网行当，自己搭建blog何其难啊？html、css、js等等，头大……&lt;/li&gt;
  &lt;li&gt;自从看了阮一峰的文章《[搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门]
(http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)》是使用
GitHub 和 Jekyll 搭建独立博客非常好的入门文章，&lt;strong&gt;强烈建议先阅读并操作一遍&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;发现搭建一个blog这么容易啊。于是，我开始着手实施这件事情，但还是历史悠久啊！&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;二、目标&lt;/h5&gt;

&lt;p&gt;期待的blog要至少满足以下要求：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;易写易读：使用者可以方便的编辑、管理文章，用户获取信息；&lt;/li&gt;
  &lt;li&gt;极简：尽量少的安装软件，使用少的命令，接触少的概念；&lt;/li&gt;
  &lt;li&gt;可用性：适应不同设备、浏览器访问，支持无障碍访问，只是关闭javascript访问&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;好了，就到这里吧，请看下回继续&lt;/p&gt;

</content>
    </entry>
 
    <entry>
        <title>你好，世界</title>
        <link href="http://F-olivia.github.io/%E6%97%A5%E5%BF%97/2015/03/28/markdonnote"/>
        <updated>2015-03-28T00:00:00+08:00</updated>
        <id>http://F-olivia.github.io/%E6%97%A5%E5%BF%97/2015/03/28/markdonnote</id>
        <content type="html">&lt;h2&gt;你好，世界&lt;/h2&gt;

&lt;p&gt;我的第一篇文章&lt;/p&gt;

&lt;p&gt;28 Mar 2015&lt;/p&gt;
</content>
    </entry>
 
 
</feed>